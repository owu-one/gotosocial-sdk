// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new health API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new health API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new health API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for health API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LiveGet(params *LiveGetParams, opts ...ClientOption) (*LiveGetOK, error)

	LiveHead(params *LiveHeadParams, opts ...ClientOption) (*LiveHeadOK, error)

	ReadyGet(params *ReadyGetParams, opts ...ClientOption) (*ReadyGetOK, error)

	ReadyHead(params *ReadyHeadParams, opts ...ClientOption) (*ReadyHeadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
LiveGet returns code 200 with no body if go to social is live ie able to respond to HTTP requests
*/
func (a *Client) LiveGet(params *LiveGetParams, opts ...ClientOption) (*LiveGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiveGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "liveGet",
		Method:             "GET",
		PathPattern:        "/livez",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LiveGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LiveGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for liveGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LiveHead returns code 200 if go to social is live ie able to respond to HTTP requests
*/
func (a *Client) LiveHead(params *LiveHeadParams, opts ...ClientOption) (*LiveHeadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLiveHeadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "liveHead",
		Method:             "HEAD",
		PathPattern:        "/livez",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LiveHeadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LiveHeadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for liveHead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadyGet returns code 200 with no body if go to social is ready ie able to connect to the database backend and do a simple s e l e c t

If GtS is not ready, 500 Internal Error will be returned, and an error will be logged (but not returned to the caller, to avoid leaking internals).
*/
func (a *Client) ReadyGet(params *ReadyGetParams, opts ...ClientOption) (*ReadyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadyGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "readyGet",
		Method:             "GET",
		PathPattern:        "/readyz",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readyGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadyHead returns code 200 with no body if go to social is ready ie able to connect to the database backend and do a simple s e l e c t

If GtS is not ready, 500 Internal Error will be returned, and an error will be logged (but not returned to the caller, to avoid leaking internals).
*/
func (a *Client) ReadyHead(params *ReadyHeadParams, opts ...ClientOption) (*ReadyHeadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadyHeadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "readyHead",
		Method:             "HEAD",
		PathPattern:        "/readyz",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReadyHeadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadyHeadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readyHead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
