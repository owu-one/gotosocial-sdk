// Code generated by go-swagger; DO NOT EDIT.

package instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new instance API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new instance API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeMultipartFormData sets the Content-Type header to "multipart/form-data".
func WithContentTypeMultipartFormData(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"multipart/form-data"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	InstanceDomainAllowsGet(params *InstanceDomainAllowsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstanceDomainAllowsGetOK, error)

	InstanceDomainBlocksGet(params *InstanceDomainBlocksGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstanceDomainBlocksGetOK, error)

	InstanceGetV1(params *InstanceGetV1Params, opts ...ClientOption) (*InstanceGetV1OK, error)

	InstanceGetV2(params *InstanceGetV2Params, opts ...ClientOption) (*InstanceGetV2OK, error)

	InstancePeersGet(params *InstancePeersGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstancePeersGetOK, error)

	InstanceUpdate(params *InstanceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstanceUpdateOK, error)

	Rules(params *RulesParams, opts ...ClientOption) (*RulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
InstanceDomainAllowsGet lists explicitly allowed domains

OAuth token may need to be provided depending on setting `instance-expose-allowlist`.
*/
func (a *Client) InstanceDomainAllowsGet(params *InstanceDomainAllowsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstanceDomainAllowsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstanceDomainAllowsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "instanceDomainAllowsGet",
		Method:             "GET",
		PathPattern:        "/api/v1/instance/domain_allows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstanceDomainAllowsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstanceDomainAllowsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instanceDomainAllowsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstanceDomainBlocksGet lists blocked domains

OAuth token may need to be provided depending on setting `instance-expose-blocklist`.
*/
func (a *Client) InstanceDomainBlocksGet(params *InstanceDomainBlocksGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstanceDomainBlocksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstanceDomainBlocksGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "instanceDomainBlocksGet",
		Method:             "GET",
		PathPattern:        "/api/v1/instance/domain_blocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstanceDomainBlocksGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstanceDomainBlocksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instanceDomainBlocksGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstanceGetV1 views instance information
*/
func (a *Client) InstanceGetV1(params *InstanceGetV1Params, opts ...ClientOption) (*InstanceGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstanceGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "instanceGetV1",
		Method:             "GET",
		PathPattern:        "/api/v1/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstanceGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstanceGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instanceGetV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstanceGetV2 views instance information
*/
func (a *Client) InstanceGetV2(params *InstanceGetV2Params, opts ...ClientOption) (*InstanceGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstanceGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "instanceGetV2",
		Method:             "GET",
		PathPattern:        "/api/v2/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstanceGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstanceGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instanceGetV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstancePeersGet lists peer domains
*/
func (a *Client) InstancePeersGet(params *InstancePeersGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstancePeersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstancePeersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "instancePeersGet",
		Method:             "GET",
		PathPattern:        "/api/v1/instance/peers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstancePeersGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstancePeersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instancePeersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstanceUpdate updates your instance information and or upload a new avatar header for the instance

This requires admin permissions on the instance.
*/
func (a *Client) InstanceUpdate(params *InstanceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstanceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstanceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "instanceUpdate",
		Method:             "PATCH",
		PathPattern:        "/api/v1/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstanceUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstanceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instanceUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Rules views instance rules public

The rules will be returned in order (sorted by Order ascending).
*/
func (a *Client) Rules(params *RulesParams, opts ...ClientOption) (*RulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rules",
		Method:             "GET",
		PathPattern:        "/api/v1/instance/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
