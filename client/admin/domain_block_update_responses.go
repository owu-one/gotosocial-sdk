// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// DomainBlockUpdateReader is a Reader for the DomainBlockUpdate structure.
type DomainBlockUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DomainBlockUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDomainBlockUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDomainBlockUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDomainBlockUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDomainBlockUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDomainBlockUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewDomainBlockUpdateNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDomainBlockUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v1/admin/domain_blocks/{id}] domainBlockUpdate", response, response.Code())
	}
}

// NewDomainBlockUpdateOK creates a DomainBlockUpdateOK with default headers values
func NewDomainBlockUpdateOK() *DomainBlockUpdateOK {
	return &DomainBlockUpdateOK{}
}

/*
DomainBlockUpdateOK describes a response with status code 200, with default header values.

The updated domain block.
*/
type DomainBlockUpdateOK struct {
	Payload *models.DomainPermission
}

// IsSuccess returns true when this domain block update o k response has a 2xx status code
func (o *DomainBlockUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this domain block update o k response has a 3xx status code
func (o *DomainBlockUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain block update o k response has a 4xx status code
func (o *DomainBlockUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this domain block update o k response has a 5xx status code
func (o *DomainBlockUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this domain block update o k response a status code equal to that given
func (o *DomainBlockUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the domain block update o k response
func (o *DomainBlockUpdateOK) Code() int {
	return 200
}

func (o *DomainBlockUpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateOK %s", 200, payload)
}

func (o *DomainBlockUpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateOK %s", 200, payload)
}

func (o *DomainBlockUpdateOK) GetPayload() *models.DomainPermission {
	return o.Payload
}

func (o *DomainBlockUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainPermission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDomainBlockUpdateBadRequest creates a DomainBlockUpdateBadRequest with default headers values
func NewDomainBlockUpdateBadRequest() *DomainBlockUpdateBadRequest {
	return &DomainBlockUpdateBadRequest{}
}

/*
DomainBlockUpdateBadRequest describes a response with status code 400, with default header values.

bad request
*/
type DomainBlockUpdateBadRequest struct {
}

// IsSuccess returns true when this domain block update bad request response has a 2xx status code
func (o *DomainBlockUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain block update bad request response has a 3xx status code
func (o *DomainBlockUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain block update bad request response has a 4xx status code
func (o *DomainBlockUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain block update bad request response has a 5xx status code
func (o *DomainBlockUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this domain block update bad request response a status code equal to that given
func (o *DomainBlockUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the domain block update bad request response
func (o *DomainBlockUpdateBadRequest) Code() int {
	return 400
}

func (o *DomainBlockUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateBadRequest", 400)
}

func (o *DomainBlockUpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateBadRequest", 400)
}

func (o *DomainBlockUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainBlockUpdateUnauthorized creates a DomainBlockUpdateUnauthorized with default headers values
func NewDomainBlockUpdateUnauthorized() *DomainBlockUpdateUnauthorized {
	return &DomainBlockUpdateUnauthorized{}
}

/*
DomainBlockUpdateUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DomainBlockUpdateUnauthorized struct {
}

// IsSuccess returns true when this domain block update unauthorized response has a 2xx status code
func (o *DomainBlockUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain block update unauthorized response has a 3xx status code
func (o *DomainBlockUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain block update unauthorized response has a 4xx status code
func (o *DomainBlockUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain block update unauthorized response has a 5xx status code
func (o *DomainBlockUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this domain block update unauthorized response a status code equal to that given
func (o *DomainBlockUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the domain block update unauthorized response
func (o *DomainBlockUpdateUnauthorized) Code() int {
	return 401
}

func (o *DomainBlockUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateUnauthorized", 401)
}

func (o *DomainBlockUpdateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateUnauthorized", 401)
}

func (o *DomainBlockUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainBlockUpdateForbidden creates a DomainBlockUpdateForbidden with default headers values
func NewDomainBlockUpdateForbidden() *DomainBlockUpdateForbidden {
	return &DomainBlockUpdateForbidden{}
}

/*
DomainBlockUpdateForbidden describes a response with status code 403, with default header values.

forbidden
*/
type DomainBlockUpdateForbidden struct {
}

// IsSuccess returns true when this domain block update forbidden response has a 2xx status code
func (o *DomainBlockUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain block update forbidden response has a 3xx status code
func (o *DomainBlockUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain block update forbidden response has a 4xx status code
func (o *DomainBlockUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain block update forbidden response has a 5xx status code
func (o *DomainBlockUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this domain block update forbidden response a status code equal to that given
func (o *DomainBlockUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the domain block update forbidden response
func (o *DomainBlockUpdateForbidden) Code() int {
	return 403
}

func (o *DomainBlockUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateForbidden", 403)
}

func (o *DomainBlockUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateForbidden", 403)
}

func (o *DomainBlockUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainBlockUpdateNotFound creates a DomainBlockUpdateNotFound with default headers values
func NewDomainBlockUpdateNotFound() *DomainBlockUpdateNotFound {
	return &DomainBlockUpdateNotFound{}
}

/*
DomainBlockUpdateNotFound describes a response with status code 404, with default header values.

not found
*/
type DomainBlockUpdateNotFound struct {
}

// IsSuccess returns true when this domain block update not found response has a 2xx status code
func (o *DomainBlockUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain block update not found response has a 3xx status code
func (o *DomainBlockUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain block update not found response has a 4xx status code
func (o *DomainBlockUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain block update not found response has a 5xx status code
func (o *DomainBlockUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this domain block update not found response a status code equal to that given
func (o *DomainBlockUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the domain block update not found response
func (o *DomainBlockUpdateNotFound) Code() int {
	return 404
}

func (o *DomainBlockUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateNotFound", 404)
}

func (o *DomainBlockUpdateNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateNotFound", 404)
}

func (o *DomainBlockUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainBlockUpdateNotAcceptable creates a DomainBlockUpdateNotAcceptable with default headers values
func NewDomainBlockUpdateNotAcceptable() *DomainBlockUpdateNotAcceptable {
	return &DomainBlockUpdateNotAcceptable{}
}

/*
DomainBlockUpdateNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type DomainBlockUpdateNotAcceptable struct {
}

// IsSuccess returns true when this domain block update not acceptable response has a 2xx status code
func (o *DomainBlockUpdateNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain block update not acceptable response has a 3xx status code
func (o *DomainBlockUpdateNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain block update not acceptable response has a 4xx status code
func (o *DomainBlockUpdateNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain block update not acceptable response has a 5xx status code
func (o *DomainBlockUpdateNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this domain block update not acceptable response a status code equal to that given
func (o *DomainBlockUpdateNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the domain block update not acceptable response
func (o *DomainBlockUpdateNotAcceptable) Code() int {
	return 406
}

func (o *DomainBlockUpdateNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateNotAcceptable", 406)
}

func (o *DomainBlockUpdateNotAcceptable) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateNotAcceptable", 406)
}

func (o *DomainBlockUpdateNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainBlockUpdateInternalServerError creates a DomainBlockUpdateInternalServerError with default headers values
func NewDomainBlockUpdateInternalServerError() *DomainBlockUpdateInternalServerError {
	return &DomainBlockUpdateInternalServerError{}
}

/*
DomainBlockUpdateInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type DomainBlockUpdateInternalServerError struct {
}

// IsSuccess returns true when this domain block update internal server error response has a 2xx status code
func (o *DomainBlockUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain block update internal server error response has a 3xx status code
func (o *DomainBlockUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain block update internal server error response has a 4xx status code
func (o *DomainBlockUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this domain block update internal server error response has a 5xx status code
func (o *DomainBlockUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this domain block update internal server error response a status code equal to that given
func (o *DomainBlockUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the domain block update internal server error response
func (o *DomainBlockUpdateInternalServerError) Code() int {
	return 500
}

func (o *DomainBlockUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateInternalServerError", 500)
}

func (o *DomainBlockUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_blocks/{id}][%d] domainBlockUpdateInternalServerError", 500)
}

func (o *DomainBlockUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
