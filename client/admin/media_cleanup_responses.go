// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// MediaCleanupReader is a Reader for the MediaCleanup structure.
type MediaCleanupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaCleanupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMediaCleanupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMediaCleanupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewMediaCleanupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMediaCleanupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMediaCleanupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewMediaCleanupNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMediaCleanupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/v1/admin/media_cleanup] mediaCleanup", response, response.Code())
	}
}

// NewMediaCleanupOK creates a MediaCleanupOK with default headers values
func NewMediaCleanupOK() *MediaCleanupOK {
	return &MediaCleanupOK{}
}

/*
MediaCleanupOK describes a response with status code 200, with default header values.

Echos the number of days requested. The cleanup is performed asynchronously after the request completes.
*/
type MediaCleanupOK struct {
}

// IsSuccess returns true when this media cleanup o k response has a 2xx status code
func (o *MediaCleanupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this media cleanup o k response has a 3xx status code
func (o *MediaCleanupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media cleanup o k response has a 4xx status code
func (o *MediaCleanupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this media cleanup o k response has a 5xx status code
func (o *MediaCleanupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this media cleanup o k response a status code equal to that given
func (o *MediaCleanupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the media cleanup o k response
func (o *MediaCleanupOK) Code() int {
	return 200
}

func (o *MediaCleanupOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupOK", 200)
}

func (o *MediaCleanupOK) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupOK", 200)
}

func (o *MediaCleanupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaCleanupBadRequest creates a MediaCleanupBadRequest with default headers values
func NewMediaCleanupBadRequest() *MediaCleanupBadRequest {
	return &MediaCleanupBadRequest{}
}

/*
MediaCleanupBadRequest describes a response with status code 400, with default header values.

bad request
*/
type MediaCleanupBadRequest struct {
}

// IsSuccess returns true when this media cleanup bad request response has a 2xx status code
func (o *MediaCleanupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media cleanup bad request response has a 3xx status code
func (o *MediaCleanupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media cleanup bad request response has a 4xx status code
func (o *MediaCleanupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this media cleanup bad request response has a 5xx status code
func (o *MediaCleanupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this media cleanup bad request response a status code equal to that given
func (o *MediaCleanupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the media cleanup bad request response
func (o *MediaCleanupBadRequest) Code() int {
	return 400
}

func (o *MediaCleanupBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupBadRequest", 400)
}

func (o *MediaCleanupBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupBadRequest", 400)
}

func (o *MediaCleanupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaCleanupUnauthorized creates a MediaCleanupUnauthorized with default headers values
func NewMediaCleanupUnauthorized() *MediaCleanupUnauthorized {
	return &MediaCleanupUnauthorized{}
}

/*
MediaCleanupUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type MediaCleanupUnauthorized struct {
}

// IsSuccess returns true when this media cleanup unauthorized response has a 2xx status code
func (o *MediaCleanupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media cleanup unauthorized response has a 3xx status code
func (o *MediaCleanupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media cleanup unauthorized response has a 4xx status code
func (o *MediaCleanupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this media cleanup unauthorized response has a 5xx status code
func (o *MediaCleanupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this media cleanup unauthorized response a status code equal to that given
func (o *MediaCleanupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the media cleanup unauthorized response
func (o *MediaCleanupUnauthorized) Code() int {
	return 401
}

func (o *MediaCleanupUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupUnauthorized", 401)
}

func (o *MediaCleanupUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupUnauthorized", 401)
}

func (o *MediaCleanupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaCleanupForbidden creates a MediaCleanupForbidden with default headers values
func NewMediaCleanupForbidden() *MediaCleanupForbidden {
	return &MediaCleanupForbidden{}
}

/*
MediaCleanupForbidden describes a response with status code 403, with default header values.

forbidden
*/
type MediaCleanupForbidden struct {
}

// IsSuccess returns true when this media cleanup forbidden response has a 2xx status code
func (o *MediaCleanupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media cleanup forbidden response has a 3xx status code
func (o *MediaCleanupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media cleanup forbidden response has a 4xx status code
func (o *MediaCleanupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this media cleanup forbidden response has a 5xx status code
func (o *MediaCleanupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this media cleanup forbidden response a status code equal to that given
func (o *MediaCleanupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the media cleanup forbidden response
func (o *MediaCleanupForbidden) Code() int {
	return 403
}

func (o *MediaCleanupForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupForbidden", 403)
}

func (o *MediaCleanupForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupForbidden", 403)
}

func (o *MediaCleanupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaCleanupNotFound creates a MediaCleanupNotFound with default headers values
func NewMediaCleanupNotFound() *MediaCleanupNotFound {
	return &MediaCleanupNotFound{}
}

/*
MediaCleanupNotFound describes a response with status code 404, with default header values.

not found
*/
type MediaCleanupNotFound struct {
}

// IsSuccess returns true when this media cleanup not found response has a 2xx status code
func (o *MediaCleanupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media cleanup not found response has a 3xx status code
func (o *MediaCleanupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media cleanup not found response has a 4xx status code
func (o *MediaCleanupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this media cleanup not found response has a 5xx status code
func (o *MediaCleanupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this media cleanup not found response a status code equal to that given
func (o *MediaCleanupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the media cleanup not found response
func (o *MediaCleanupNotFound) Code() int {
	return 404
}

func (o *MediaCleanupNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupNotFound", 404)
}

func (o *MediaCleanupNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupNotFound", 404)
}

func (o *MediaCleanupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaCleanupNotAcceptable creates a MediaCleanupNotAcceptable with default headers values
func NewMediaCleanupNotAcceptable() *MediaCleanupNotAcceptable {
	return &MediaCleanupNotAcceptable{}
}

/*
MediaCleanupNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type MediaCleanupNotAcceptable struct {
}

// IsSuccess returns true when this media cleanup not acceptable response has a 2xx status code
func (o *MediaCleanupNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media cleanup not acceptable response has a 3xx status code
func (o *MediaCleanupNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media cleanup not acceptable response has a 4xx status code
func (o *MediaCleanupNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this media cleanup not acceptable response has a 5xx status code
func (o *MediaCleanupNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this media cleanup not acceptable response a status code equal to that given
func (o *MediaCleanupNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the media cleanup not acceptable response
func (o *MediaCleanupNotAcceptable) Code() int {
	return 406
}

func (o *MediaCleanupNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupNotAcceptable", 406)
}

func (o *MediaCleanupNotAcceptable) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupNotAcceptable", 406)
}

func (o *MediaCleanupNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaCleanupInternalServerError creates a MediaCleanupInternalServerError with default headers values
func NewMediaCleanupInternalServerError() *MediaCleanupInternalServerError {
	return &MediaCleanupInternalServerError{}
}

/*
MediaCleanupInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type MediaCleanupInternalServerError struct {
}

// IsSuccess returns true when this media cleanup internal server error response has a 2xx status code
func (o *MediaCleanupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media cleanup internal server error response has a 3xx status code
func (o *MediaCleanupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media cleanup internal server error response has a 4xx status code
func (o *MediaCleanupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this media cleanup internal server error response has a 5xx status code
func (o *MediaCleanupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this media cleanup internal server error response a status code equal to that given
func (o *MediaCleanupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the media cleanup internal server error response
func (o *MediaCleanupInternalServerError) Code() int {
	return 500
}

func (o *MediaCleanupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupInternalServerError", 500)
}

func (o *MediaCleanupInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_cleanup][%d] mediaCleanupInternalServerError", 500)
}

func (o *MediaCleanupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
