// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDomainPermissionSubscriptionCreateParams creates a new DomainPermissionSubscriptionCreateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDomainPermissionSubscriptionCreateParams() *DomainPermissionSubscriptionCreateParams {
	return &DomainPermissionSubscriptionCreateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDomainPermissionSubscriptionCreateParamsWithTimeout creates a new DomainPermissionSubscriptionCreateParams object
// with the ability to set a timeout on a request.
func NewDomainPermissionSubscriptionCreateParamsWithTimeout(timeout time.Duration) *DomainPermissionSubscriptionCreateParams {
	return &DomainPermissionSubscriptionCreateParams{
		timeout: timeout,
	}
}

// NewDomainPermissionSubscriptionCreateParamsWithContext creates a new DomainPermissionSubscriptionCreateParams object
// with the ability to set a context for a request.
func NewDomainPermissionSubscriptionCreateParamsWithContext(ctx context.Context) *DomainPermissionSubscriptionCreateParams {
	return &DomainPermissionSubscriptionCreateParams{
		Context: ctx,
	}
}

// NewDomainPermissionSubscriptionCreateParamsWithHTTPClient creates a new DomainPermissionSubscriptionCreateParams object
// with the ability to set a custom HTTPClient for a request.
func NewDomainPermissionSubscriptionCreateParamsWithHTTPClient(client *http.Client) *DomainPermissionSubscriptionCreateParams {
	return &DomainPermissionSubscriptionCreateParams{
		HTTPClient: client,
	}
}

/*
DomainPermissionSubscriptionCreateParams contains all the parameters to send to the API endpoint

	for the domain permission subscription create operation.

	Typically these are written to a http.Request.
*/
type DomainPermissionSubscriptionCreateParams struct {

	/* AdoptOrphans.

	   If true, this domain permission subscription will "adopt" domain permissions which already exist on the instance, and which meet the following conditions: 1) they have no subscription ID (ie., they're "orphaned") and 2) they are present in the subscribed list. Such orphaned domain permissions will be given this subscription's subscription ID value and be managed by this subscription.
	*/
	AdoptOrphans *bool

	/* AsDraft.

	   If true, domain permissions arising from this subscription will be created as drafts that must be approved by a moderator to take effect. If false, domain permissions from this subscription will come into force immediately. Defaults to "true".

	   Default: true
	*/
	AsDraft *bool

	/* ContentType.

	   MIME content type to use when parsing the permissions list. One of "text/plain", "text/csv", and "application/json".
	*/
	ContentType string

	/* FetchPassword.

	   Optional basic auth password to provide when fetching given uri. If set, will be transmitted along with `fetch_username` when doing the fetch.
	*/
	FetchPassword *string

	/* FetchUsername.

	   Optional basic auth username to provide when fetching given uri. If set, will be transmitted along with `fetch_password` when doing the fetch.
	*/
	FetchUsername *string

	/* PermissionType.

	   Type of permissions to create by parsing the targeted file/list. One of "allow" or "block".
	*/
	PermissionType string

	/* Priority.

	   Priority of this subscription compared to others of the same permission type. 0-255 (higher = higher priority). Higher priority subscriptions will overwrite permissions generated by lower priority subscriptions. When two subscriptions have the same `priority` value, priority is indeterminate, so it's recommended to always set this value manually.
	*/
	Priority *float64

	/* RemoveRetracted.

	   If true, then when a list is processed, if the list does *not* contain entries that it *did* contain previously, ie., retracted entries, then domain permissions corresponding to those entries will be removed. If false, they will just be orphaned instead.

	   Default: true
	*/
	RemoveRetracted *bool

	/* Title.

	   Optional title for this subscription.
	*/
	Title *string

	/* URI.

	   URI to call in order to fetch the permissions list.
	*/
	URI string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the domain permission subscription create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DomainPermissionSubscriptionCreateParams) WithDefaults() *DomainPermissionSubscriptionCreateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the domain permission subscription create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DomainPermissionSubscriptionCreateParams) SetDefaults() {
	var (
		adoptOrphansDefault = bool(false)

		asDraftDefault = bool(true)

		priorityDefault = float64(0)

		removeRetractedDefault = bool(true)
	)

	val := DomainPermissionSubscriptionCreateParams{
		AdoptOrphans:    &adoptOrphansDefault,
		AsDraft:         &asDraftDefault,
		Priority:        &priorityDefault,
		RemoveRetracted: &removeRetractedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithTimeout(timeout time.Duration) *DomainPermissionSubscriptionCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithContext(ctx context.Context) *DomainPermissionSubscriptionCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithHTTPClient(client *http.Client) *DomainPermissionSubscriptionCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAdoptOrphans adds the adoptOrphans to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithAdoptOrphans(adoptOrphans *bool) *DomainPermissionSubscriptionCreateParams {
	o.SetAdoptOrphans(adoptOrphans)
	return o
}

// SetAdoptOrphans adds the adoptOrphans to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetAdoptOrphans(adoptOrphans *bool) {
	o.AdoptOrphans = adoptOrphans
}

// WithAsDraft adds the asDraft to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithAsDraft(asDraft *bool) *DomainPermissionSubscriptionCreateParams {
	o.SetAsDraft(asDraft)
	return o
}

// SetAsDraft adds the asDraft to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetAsDraft(asDraft *bool) {
	o.AsDraft = asDraft
}

// WithContentType adds the contentType to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithContentType(contentType string) *DomainPermissionSubscriptionCreateParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithFetchPassword adds the fetchPassword to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithFetchPassword(fetchPassword *string) *DomainPermissionSubscriptionCreateParams {
	o.SetFetchPassword(fetchPassword)
	return o
}

// SetFetchPassword adds the fetchPassword to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetFetchPassword(fetchPassword *string) {
	o.FetchPassword = fetchPassword
}

// WithFetchUsername adds the fetchUsername to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithFetchUsername(fetchUsername *string) *DomainPermissionSubscriptionCreateParams {
	o.SetFetchUsername(fetchUsername)
	return o
}

// SetFetchUsername adds the fetchUsername to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetFetchUsername(fetchUsername *string) {
	o.FetchUsername = fetchUsername
}

// WithPermissionType adds the permissionType to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithPermissionType(permissionType string) *DomainPermissionSubscriptionCreateParams {
	o.SetPermissionType(permissionType)
	return o
}

// SetPermissionType adds the permissionType to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetPermissionType(permissionType string) {
	o.PermissionType = permissionType
}

// WithPriority adds the priority to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithPriority(priority *float64) *DomainPermissionSubscriptionCreateParams {
	o.SetPriority(priority)
	return o
}

// SetPriority adds the priority to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetPriority(priority *float64) {
	o.Priority = priority
}

// WithRemoveRetracted adds the removeRetracted to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithRemoveRetracted(removeRetracted *bool) *DomainPermissionSubscriptionCreateParams {
	o.SetRemoveRetracted(removeRetracted)
	return o
}

// SetRemoveRetracted adds the removeRetracted to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetRemoveRetracted(removeRetracted *bool) {
	o.RemoveRetracted = removeRetracted
}

// WithTitle adds the title to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithTitle(title *string) *DomainPermissionSubscriptionCreateParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetTitle(title *string) {
	o.Title = title
}

// WithURI adds the uri to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) WithURI(uri string) *DomainPermissionSubscriptionCreateParams {
	o.SetURI(uri)
	return o
}

// SetURI adds the uri to the domain permission subscription create params
func (o *DomainPermissionSubscriptionCreateParams) SetURI(uri string) {
	o.URI = uri
}

// WriteToRequest writes these params to a swagger request
func (o *DomainPermissionSubscriptionCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AdoptOrphans != nil {

		// form param adopt_orphans
		var frAdoptOrphans bool
		if o.AdoptOrphans != nil {
			frAdoptOrphans = *o.AdoptOrphans
		}
		fAdoptOrphans := swag.FormatBool(frAdoptOrphans)
		if fAdoptOrphans != "" {
			if err := r.SetFormParam("adopt_orphans", fAdoptOrphans); err != nil {
				return err
			}
		}
	}

	if o.AsDraft != nil {

		// form param as_draft
		var frAsDraft bool
		if o.AsDraft != nil {
			frAsDraft = *o.AsDraft
		}
		fAsDraft := swag.FormatBool(frAsDraft)
		if fAsDraft != "" {
			if err := r.SetFormParam("as_draft", fAsDraft); err != nil {
				return err
			}
		}
	}

	// form param content_type
	frContentType := o.ContentType
	fContentType := frContentType
	if fContentType != "" {
		if err := r.SetFormParam("content_type", fContentType); err != nil {
			return err
		}
	}

	if o.FetchPassword != nil {

		// form param fetch_password
		var frFetchPassword string
		if o.FetchPassword != nil {
			frFetchPassword = *o.FetchPassword
		}
		fFetchPassword := frFetchPassword
		if fFetchPassword != "" {
			if err := r.SetFormParam("fetch_password", fFetchPassword); err != nil {
				return err
			}
		}
	}

	if o.FetchUsername != nil {

		// form param fetch_username
		var frFetchUsername string
		if o.FetchUsername != nil {
			frFetchUsername = *o.FetchUsername
		}
		fFetchUsername := frFetchUsername
		if fFetchUsername != "" {
			if err := r.SetFormParam("fetch_username", fFetchUsername); err != nil {
				return err
			}
		}
	}

	// form param permission_type
	frPermissionType := o.PermissionType
	fPermissionType := frPermissionType
	if fPermissionType != "" {
		if err := r.SetFormParam("permission_type", fPermissionType); err != nil {
			return err
		}
	}

	if o.Priority != nil {

		// form param priority
		var frPriority float64
		if o.Priority != nil {
			frPriority = *o.Priority
		}
		fPriority := swag.FormatFloat64(frPriority)
		if fPriority != "" {
			if err := r.SetFormParam("priority", fPriority); err != nil {
				return err
			}
		}
	}

	if o.RemoveRetracted != nil {

		// form param remove_retracted
		var frRemoveRetracted bool
		if o.RemoveRetracted != nil {
			frRemoveRetracted = *o.RemoveRetracted
		}
		fRemoveRetracted := swag.FormatBool(frRemoveRetracted)
		if fRemoveRetracted != "" {
			if err := r.SetFormParam("remove_retracted", fRemoveRetracted); err != nil {
				return err
			}
		}
	}

	if o.Title != nil {

		// form param title
		var frTitle string
		if o.Title != nil {
			frTitle = *o.Title
		}
		fTitle := frTitle
		if fTitle != "" {
			if err := r.SetFormParam("title", fTitle); err != nil {
				return err
			}
		}
	}

	// form param uri
	frURI := o.URI
	fURI := frURI
	if fURI != "" {
		if err := r.SetFormParam("uri", fURI); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
