// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// DomainAllowUpdateReader is a Reader for the DomainAllowUpdate structure.
type DomainAllowUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DomainAllowUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDomainAllowUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDomainAllowUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDomainAllowUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDomainAllowUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDomainAllowUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewDomainAllowUpdateNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDomainAllowUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v1/admin/domain_allows/{id}] domainAllowUpdate", response, response.Code())
	}
}

// NewDomainAllowUpdateOK creates a DomainAllowUpdateOK with default headers values
func NewDomainAllowUpdateOK() *DomainAllowUpdateOK {
	return &DomainAllowUpdateOK{}
}

/*
DomainAllowUpdateOK describes a response with status code 200, with default header values.

The updated domain allow.
*/
type DomainAllowUpdateOK struct {
	Payload *models.DomainPermission
}

// IsSuccess returns true when this domain allow update o k response has a 2xx status code
func (o *DomainAllowUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this domain allow update o k response has a 3xx status code
func (o *DomainAllowUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain allow update o k response has a 4xx status code
func (o *DomainAllowUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this domain allow update o k response has a 5xx status code
func (o *DomainAllowUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this domain allow update o k response a status code equal to that given
func (o *DomainAllowUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the domain allow update o k response
func (o *DomainAllowUpdateOK) Code() int {
	return 200
}

func (o *DomainAllowUpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateOK %s", 200, payload)
}

func (o *DomainAllowUpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateOK %s", 200, payload)
}

func (o *DomainAllowUpdateOK) GetPayload() *models.DomainPermission {
	return o.Payload
}

func (o *DomainAllowUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainPermission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDomainAllowUpdateBadRequest creates a DomainAllowUpdateBadRequest with default headers values
func NewDomainAllowUpdateBadRequest() *DomainAllowUpdateBadRequest {
	return &DomainAllowUpdateBadRequest{}
}

/*
DomainAllowUpdateBadRequest describes a response with status code 400, with default header values.

bad request
*/
type DomainAllowUpdateBadRequest struct {
}

// IsSuccess returns true when this domain allow update bad request response has a 2xx status code
func (o *DomainAllowUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain allow update bad request response has a 3xx status code
func (o *DomainAllowUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain allow update bad request response has a 4xx status code
func (o *DomainAllowUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain allow update bad request response has a 5xx status code
func (o *DomainAllowUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this domain allow update bad request response a status code equal to that given
func (o *DomainAllowUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the domain allow update bad request response
func (o *DomainAllowUpdateBadRequest) Code() int {
	return 400
}

func (o *DomainAllowUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateBadRequest", 400)
}

func (o *DomainAllowUpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateBadRequest", 400)
}

func (o *DomainAllowUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainAllowUpdateUnauthorized creates a DomainAllowUpdateUnauthorized with default headers values
func NewDomainAllowUpdateUnauthorized() *DomainAllowUpdateUnauthorized {
	return &DomainAllowUpdateUnauthorized{}
}

/*
DomainAllowUpdateUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DomainAllowUpdateUnauthorized struct {
}

// IsSuccess returns true when this domain allow update unauthorized response has a 2xx status code
func (o *DomainAllowUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain allow update unauthorized response has a 3xx status code
func (o *DomainAllowUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain allow update unauthorized response has a 4xx status code
func (o *DomainAllowUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain allow update unauthorized response has a 5xx status code
func (o *DomainAllowUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this domain allow update unauthorized response a status code equal to that given
func (o *DomainAllowUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the domain allow update unauthorized response
func (o *DomainAllowUpdateUnauthorized) Code() int {
	return 401
}

func (o *DomainAllowUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateUnauthorized", 401)
}

func (o *DomainAllowUpdateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateUnauthorized", 401)
}

func (o *DomainAllowUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainAllowUpdateForbidden creates a DomainAllowUpdateForbidden with default headers values
func NewDomainAllowUpdateForbidden() *DomainAllowUpdateForbidden {
	return &DomainAllowUpdateForbidden{}
}

/*
DomainAllowUpdateForbidden describes a response with status code 403, with default header values.

forbidden
*/
type DomainAllowUpdateForbidden struct {
}

// IsSuccess returns true when this domain allow update forbidden response has a 2xx status code
func (o *DomainAllowUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain allow update forbidden response has a 3xx status code
func (o *DomainAllowUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain allow update forbidden response has a 4xx status code
func (o *DomainAllowUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain allow update forbidden response has a 5xx status code
func (o *DomainAllowUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this domain allow update forbidden response a status code equal to that given
func (o *DomainAllowUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the domain allow update forbidden response
func (o *DomainAllowUpdateForbidden) Code() int {
	return 403
}

func (o *DomainAllowUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateForbidden", 403)
}

func (o *DomainAllowUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateForbidden", 403)
}

func (o *DomainAllowUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainAllowUpdateNotFound creates a DomainAllowUpdateNotFound with default headers values
func NewDomainAllowUpdateNotFound() *DomainAllowUpdateNotFound {
	return &DomainAllowUpdateNotFound{}
}

/*
DomainAllowUpdateNotFound describes a response with status code 404, with default header values.

not found
*/
type DomainAllowUpdateNotFound struct {
}

// IsSuccess returns true when this domain allow update not found response has a 2xx status code
func (o *DomainAllowUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain allow update not found response has a 3xx status code
func (o *DomainAllowUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain allow update not found response has a 4xx status code
func (o *DomainAllowUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain allow update not found response has a 5xx status code
func (o *DomainAllowUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this domain allow update not found response a status code equal to that given
func (o *DomainAllowUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the domain allow update not found response
func (o *DomainAllowUpdateNotFound) Code() int {
	return 404
}

func (o *DomainAllowUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateNotFound", 404)
}

func (o *DomainAllowUpdateNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateNotFound", 404)
}

func (o *DomainAllowUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainAllowUpdateNotAcceptable creates a DomainAllowUpdateNotAcceptable with default headers values
func NewDomainAllowUpdateNotAcceptable() *DomainAllowUpdateNotAcceptable {
	return &DomainAllowUpdateNotAcceptable{}
}

/*
DomainAllowUpdateNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type DomainAllowUpdateNotAcceptable struct {
}

// IsSuccess returns true when this domain allow update not acceptable response has a 2xx status code
func (o *DomainAllowUpdateNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain allow update not acceptable response has a 3xx status code
func (o *DomainAllowUpdateNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain allow update not acceptable response has a 4xx status code
func (o *DomainAllowUpdateNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain allow update not acceptable response has a 5xx status code
func (o *DomainAllowUpdateNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this domain allow update not acceptable response a status code equal to that given
func (o *DomainAllowUpdateNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the domain allow update not acceptable response
func (o *DomainAllowUpdateNotAcceptable) Code() int {
	return 406
}

func (o *DomainAllowUpdateNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateNotAcceptable", 406)
}

func (o *DomainAllowUpdateNotAcceptable) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateNotAcceptable", 406)
}

func (o *DomainAllowUpdateNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainAllowUpdateInternalServerError creates a DomainAllowUpdateInternalServerError with default headers values
func NewDomainAllowUpdateInternalServerError() *DomainAllowUpdateInternalServerError {
	return &DomainAllowUpdateInternalServerError{}
}

/*
DomainAllowUpdateInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type DomainAllowUpdateInternalServerError struct {
}

// IsSuccess returns true when this domain allow update internal server error response has a 2xx status code
func (o *DomainAllowUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain allow update internal server error response has a 3xx status code
func (o *DomainAllowUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain allow update internal server error response has a 4xx status code
func (o *DomainAllowUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this domain allow update internal server error response has a 5xx status code
func (o *DomainAllowUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this domain allow update internal server error response a status code equal to that given
func (o *DomainAllowUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the domain allow update internal server error response
func (o *DomainAllowUpdateInternalServerError) Code() int {
	return 500
}

func (o *DomainAllowUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateInternalServerError", 500)
}

func (o *DomainAllowUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/admin/domain_allows/{id}][%d] domainAllowUpdateInternalServerError", 500)
}

func (o *DomainAllowUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
