// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDomainPermissionDraftCreateParams creates a new DomainPermissionDraftCreateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDomainPermissionDraftCreateParams() *DomainPermissionDraftCreateParams {
	return &DomainPermissionDraftCreateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDomainPermissionDraftCreateParamsWithTimeout creates a new DomainPermissionDraftCreateParams object
// with the ability to set a timeout on a request.
func NewDomainPermissionDraftCreateParamsWithTimeout(timeout time.Duration) *DomainPermissionDraftCreateParams {
	return &DomainPermissionDraftCreateParams{
		timeout: timeout,
	}
}

// NewDomainPermissionDraftCreateParamsWithContext creates a new DomainPermissionDraftCreateParams object
// with the ability to set a context for a request.
func NewDomainPermissionDraftCreateParamsWithContext(ctx context.Context) *DomainPermissionDraftCreateParams {
	return &DomainPermissionDraftCreateParams{
		Context: ctx,
	}
}

// NewDomainPermissionDraftCreateParamsWithHTTPClient creates a new DomainPermissionDraftCreateParams object
// with the ability to set a custom HTTPClient for a request.
func NewDomainPermissionDraftCreateParamsWithHTTPClient(client *http.Client) *DomainPermissionDraftCreateParams {
	return &DomainPermissionDraftCreateParams{
		HTTPClient: client,
	}
}

/*
DomainPermissionDraftCreateParams contains all the parameters to send to the API endpoint

	for the domain permission draft create operation.

	Typically these are written to a http.Request.
*/
type DomainPermissionDraftCreateParams struct {

	/* Domain.

	   Domain to create the permission draft for.
	*/
	Domain *string

	/* Obfuscate.

	   Obfuscate the name of the domain when serving it publicly. Eg., `example.org` becomes something like `ex***e.org`.
	*/
	Obfuscate *bool

	/* PermissionType.

	   Create a draft "allow" or a draft "block".
	*/
	PermissionType *string

	/* PrivateComment.

	   Private comment about this domain permission. Will only be shown to other admins, so this is a useful way of internally keeping track of why a certain domain ended up permissioned.
	*/
	PrivateComment *string

	/* PublicComment.

	   Public comment about this domain permission. This will be displayed alongside the domain permission if you choose to share permissions.
	*/
	PublicComment *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the domain permission draft create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DomainPermissionDraftCreateParams) WithDefaults() *DomainPermissionDraftCreateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the domain permission draft create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DomainPermissionDraftCreateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) WithTimeout(timeout time.Duration) *DomainPermissionDraftCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) WithContext(ctx context.Context) *DomainPermissionDraftCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) WithHTTPClient(client *http.Client) *DomainPermissionDraftCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) WithDomain(domain *string) *DomainPermissionDraftCreateParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithObfuscate adds the obfuscate to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) WithObfuscate(obfuscate *bool) *DomainPermissionDraftCreateParams {
	o.SetObfuscate(obfuscate)
	return o
}

// SetObfuscate adds the obfuscate to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) SetObfuscate(obfuscate *bool) {
	o.Obfuscate = obfuscate
}

// WithPermissionType adds the permissionType to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) WithPermissionType(permissionType *string) *DomainPermissionDraftCreateParams {
	o.SetPermissionType(permissionType)
	return o
}

// SetPermissionType adds the permissionType to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) SetPermissionType(permissionType *string) {
	o.PermissionType = permissionType
}

// WithPrivateComment adds the privateComment to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) WithPrivateComment(privateComment *string) *DomainPermissionDraftCreateParams {
	o.SetPrivateComment(privateComment)
	return o
}

// SetPrivateComment adds the privateComment to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) SetPrivateComment(privateComment *string) {
	o.PrivateComment = privateComment
}

// WithPublicComment adds the publicComment to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) WithPublicComment(publicComment *string) *DomainPermissionDraftCreateParams {
	o.SetPublicComment(publicComment)
	return o
}

// SetPublicComment adds the publicComment to the domain permission draft create params
func (o *DomainPermissionDraftCreateParams) SetPublicComment(publicComment *string) {
	o.PublicComment = publicComment
}

// WriteToRequest writes these params to a swagger request
func (o *DomainPermissionDraftCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Domain != nil {

		// form param domain
		var frDomain string
		if o.Domain != nil {
			frDomain = *o.Domain
		}
		fDomain := frDomain
		if fDomain != "" {
			if err := r.SetFormParam("domain", fDomain); err != nil {
				return err
			}
		}
	}

	if o.Obfuscate != nil {

		// form param obfuscate
		var frObfuscate bool
		if o.Obfuscate != nil {
			frObfuscate = *o.Obfuscate
		}
		fObfuscate := swag.FormatBool(frObfuscate)
		if fObfuscate != "" {
			if err := r.SetFormParam("obfuscate", fObfuscate); err != nil {
				return err
			}
		}
	}

	if o.PermissionType != nil {

		// form param permission_type
		var frPermissionType string
		if o.PermissionType != nil {
			frPermissionType = *o.PermissionType
		}
		fPermissionType := frPermissionType
		if fPermissionType != "" {
			if err := r.SetFormParam("permission_type", fPermissionType); err != nil {
				return err
			}
		}
	}

	if o.PrivateComment != nil {

		// form param private_comment
		var frPrivateComment string
		if o.PrivateComment != nil {
			frPrivateComment = *o.PrivateComment
		}
		fPrivateComment := frPrivateComment
		if fPrivateComment != "" {
			if err := r.SetFormParam("private_comment", fPrivateComment); err != nil {
				return err
			}
		}
	}

	if o.PublicComment != nil {

		// form param public_comment
		var frPublicComment string
		if o.PublicComment != nil {
			frPublicComment = *o.PublicComment
		}
		fPublicComment := frPublicComment
		if fPublicComment != "" {
			if err := r.SetFormParam("public_comment", fPublicComment); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
