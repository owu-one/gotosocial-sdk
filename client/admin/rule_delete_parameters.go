// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRuleDeleteParams creates a new RuleDeleteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRuleDeleteParams() *RuleDeleteParams {
	return &RuleDeleteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRuleDeleteParamsWithTimeout creates a new RuleDeleteParams object
// with the ability to set a timeout on a request.
func NewRuleDeleteParamsWithTimeout(timeout time.Duration) *RuleDeleteParams {
	return &RuleDeleteParams{
		timeout: timeout,
	}
}

// NewRuleDeleteParamsWithContext creates a new RuleDeleteParams object
// with the ability to set a context for a request.
func NewRuleDeleteParamsWithContext(ctx context.Context) *RuleDeleteParams {
	return &RuleDeleteParams{
		Context: ctx,
	}
}

// NewRuleDeleteParamsWithHTTPClient creates a new RuleDeleteParams object
// with the ability to set a custom HTTPClient for a request.
func NewRuleDeleteParamsWithHTTPClient(client *http.Client) *RuleDeleteParams {
	return &RuleDeleteParams{
		HTTPClient: client,
	}
}

/*
RuleDeleteParams contains all the parameters to send to the API endpoint

	for the rule delete operation.

	Typically these are written to a http.Request.
*/
type RuleDeleteParams struct {

	/* ID.

	   The id of the rule to delete.
	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the rule delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RuleDeleteParams) WithDefaults() *RuleDeleteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the rule delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RuleDeleteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the rule delete params
func (o *RuleDeleteParams) WithTimeout(timeout time.Duration) *RuleDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the rule delete params
func (o *RuleDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the rule delete params
func (o *RuleDeleteParams) WithContext(ctx context.Context) *RuleDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the rule delete params
func (o *RuleDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the rule delete params
func (o *RuleDeleteParams) WithHTTPClient(client *http.Client) *RuleDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the rule delete params
func (o *RuleDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the rule delete params
func (o *RuleDeleteParams) WithID(id string) *RuleDeleteParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the rule delete params
func (o *RuleDeleteParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *RuleDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
