// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// EmojiGetReader is a Reader for the EmojiGet structure.
type EmojiGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EmojiGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEmojiGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEmojiGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEmojiGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEmojiGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEmojiGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewEmojiGetNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEmojiGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/admin/custom_emojis/{id}] emojiGet", response, response.Code())
	}
}

// NewEmojiGetOK creates a EmojiGetOK with default headers values
func NewEmojiGetOK() *EmojiGetOK {
	return &EmojiGetOK{}
}

/*
EmojiGetOK describes a response with status code 200, with default header values.

A single emoji.
*/
type EmojiGetOK struct {
	Payload *models.AdminEmoji
}

// IsSuccess returns true when this emoji get o k response has a 2xx status code
func (o *EmojiGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this emoji get o k response has a 3xx status code
func (o *EmojiGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this emoji get o k response has a 4xx status code
func (o *EmojiGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this emoji get o k response has a 5xx status code
func (o *EmojiGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this emoji get o k response a status code equal to that given
func (o *EmojiGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the emoji get o k response
func (o *EmojiGetOK) Code() int {
	return 200
}

func (o *EmojiGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetOK %s", 200, payload)
}

func (o *EmojiGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetOK %s", 200, payload)
}

func (o *EmojiGetOK) GetPayload() *models.AdminEmoji {
	return o.Payload
}

func (o *EmojiGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AdminEmoji)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmojiGetBadRequest creates a EmojiGetBadRequest with default headers values
func NewEmojiGetBadRequest() *EmojiGetBadRequest {
	return &EmojiGetBadRequest{}
}

/*
EmojiGetBadRequest describes a response with status code 400, with default header values.

bad request
*/
type EmojiGetBadRequest struct {
}

// IsSuccess returns true when this emoji get bad request response has a 2xx status code
func (o *EmojiGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this emoji get bad request response has a 3xx status code
func (o *EmojiGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this emoji get bad request response has a 4xx status code
func (o *EmojiGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this emoji get bad request response has a 5xx status code
func (o *EmojiGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this emoji get bad request response a status code equal to that given
func (o *EmojiGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the emoji get bad request response
func (o *EmojiGetBadRequest) Code() int {
	return 400
}

func (o *EmojiGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetBadRequest", 400)
}

func (o *EmojiGetBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetBadRequest", 400)
}

func (o *EmojiGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEmojiGetUnauthorized creates a EmojiGetUnauthorized with default headers values
func NewEmojiGetUnauthorized() *EmojiGetUnauthorized {
	return &EmojiGetUnauthorized{}
}

/*
EmojiGetUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type EmojiGetUnauthorized struct {
}

// IsSuccess returns true when this emoji get unauthorized response has a 2xx status code
func (o *EmojiGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this emoji get unauthorized response has a 3xx status code
func (o *EmojiGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this emoji get unauthorized response has a 4xx status code
func (o *EmojiGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this emoji get unauthorized response has a 5xx status code
func (o *EmojiGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this emoji get unauthorized response a status code equal to that given
func (o *EmojiGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the emoji get unauthorized response
func (o *EmojiGetUnauthorized) Code() int {
	return 401
}

func (o *EmojiGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetUnauthorized", 401)
}

func (o *EmojiGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetUnauthorized", 401)
}

func (o *EmojiGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEmojiGetForbidden creates a EmojiGetForbidden with default headers values
func NewEmojiGetForbidden() *EmojiGetForbidden {
	return &EmojiGetForbidden{}
}

/*
EmojiGetForbidden describes a response with status code 403, with default header values.

forbidden
*/
type EmojiGetForbidden struct {
}

// IsSuccess returns true when this emoji get forbidden response has a 2xx status code
func (o *EmojiGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this emoji get forbidden response has a 3xx status code
func (o *EmojiGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this emoji get forbidden response has a 4xx status code
func (o *EmojiGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this emoji get forbidden response has a 5xx status code
func (o *EmojiGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this emoji get forbidden response a status code equal to that given
func (o *EmojiGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the emoji get forbidden response
func (o *EmojiGetForbidden) Code() int {
	return 403
}

func (o *EmojiGetForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetForbidden", 403)
}

func (o *EmojiGetForbidden) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetForbidden", 403)
}

func (o *EmojiGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEmojiGetNotFound creates a EmojiGetNotFound with default headers values
func NewEmojiGetNotFound() *EmojiGetNotFound {
	return &EmojiGetNotFound{}
}

/*
EmojiGetNotFound describes a response with status code 404, with default header values.

not found
*/
type EmojiGetNotFound struct {
}

// IsSuccess returns true when this emoji get not found response has a 2xx status code
func (o *EmojiGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this emoji get not found response has a 3xx status code
func (o *EmojiGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this emoji get not found response has a 4xx status code
func (o *EmojiGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this emoji get not found response has a 5xx status code
func (o *EmojiGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this emoji get not found response a status code equal to that given
func (o *EmojiGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the emoji get not found response
func (o *EmojiGetNotFound) Code() int {
	return 404
}

func (o *EmojiGetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetNotFound", 404)
}

func (o *EmojiGetNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetNotFound", 404)
}

func (o *EmojiGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEmojiGetNotAcceptable creates a EmojiGetNotAcceptable with default headers values
func NewEmojiGetNotAcceptable() *EmojiGetNotAcceptable {
	return &EmojiGetNotAcceptable{}
}

/*
EmojiGetNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type EmojiGetNotAcceptable struct {
}

// IsSuccess returns true when this emoji get not acceptable response has a 2xx status code
func (o *EmojiGetNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this emoji get not acceptable response has a 3xx status code
func (o *EmojiGetNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this emoji get not acceptable response has a 4xx status code
func (o *EmojiGetNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this emoji get not acceptable response has a 5xx status code
func (o *EmojiGetNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this emoji get not acceptable response a status code equal to that given
func (o *EmojiGetNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the emoji get not acceptable response
func (o *EmojiGetNotAcceptable) Code() int {
	return 406
}

func (o *EmojiGetNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetNotAcceptable", 406)
}

func (o *EmojiGetNotAcceptable) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetNotAcceptable", 406)
}

func (o *EmojiGetNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEmojiGetInternalServerError creates a EmojiGetInternalServerError with default headers values
func NewEmojiGetInternalServerError() *EmojiGetInternalServerError {
	return &EmojiGetInternalServerError{}
}

/*
EmojiGetInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type EmojiGetInternalServerError struct {
}

// IsSuccess returns true when this emoji get internal server error response has a 2xx status code
func (o *EmojiGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this emoji get internal server error response has a 3xx status code
func (o *EmojiGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this emoji get internal server error response has a 4xx status code
func (o *EmojiGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this emoji get internal server error response has a 5xx status code
func (o *EmojiGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this emoji get internal server error response a status code equal to that given
func (o *EmojiGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the emoji get internal server error response
func (o *EmojiGetInternalServerError) Code() int {
	return 500
}

func (o *EmojiGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetInternalServerError", 500)
}

func (o *EmojiGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/admin/custom_emojis/{id}][%d] emojiGetInternalServerError", 500)
}

func (o *EmojiGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
