// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDomainBlockUpdateParams creates a new DomainBlockUpdateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDomainBlockUpdateParams() *DomainBlockUpdateParams {
	return &DomainBlockUpdateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDomainBlockUpdateParamsWithTimeout creates a new DomainBlockUpdateParams object
// with the ability to set a timeout on a request.
func NewDomainBlockUpdateParamsWithTimeout(timeout time.Duration) *DomainBlockUpdateParams {
	return &DomainBlockUpdateParams{
		timeout: timeout,
	}
}

// NewDomainBlockUpdateParamsWithContext creates a new DomainBlockUpdateParams object
// with the ability to set a context for a request.
func NewDomainBlockUpdateParamsWithContext(ctx context.Context) *DomainBlockUpdateParams {
	return &DomainBlockUpdateParams{
		Context: ctx,
	}
}

// NewDomainBlockUpdateParamsWithHTTPClient creates a new DomainBlockUpdateParams object
// with the ability to set a custom HTTPClient for a request.
func NewDomainBlockUpdateParamsWithHTTPClient(client *http.Client) *DomainBlockUpdateParams {
	return &DomainBlockUpdateParams{
		HTTPClient: client,
	}
}

/*
DomainBlockUpdateParams contains all the parameters to send to the API endpoint

	for the domain block update operation.

	Typically these are written to a http.Request.
*/
type DomainBlockUpdateParams struct {

	/* ID.

	   The id of the domain block.
	*/
	ID string

	/* Obfuscate.

	   Obfuscate the name of the domain when serving it publicly. Eg., `example.org` becomes something like `ex***e.org`.
	*/
	Obfuscate *bool

	/* PrivateComment.

	   Private comment about this domain block. Will only be shown to other admins, so this is a useful way of internally keeping track of why a certain domain ended up blocked.
	*/
	PrivateComment *string

	/* PublicComment.

	   Public comment about this domain block. This will be displayed alongside the domain block if you choose to share blocks.
	*/
	PublicComment *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the domain block update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DomainBlockUpdateParams) WithDefaults() *DomainBlockUpdateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the domain block update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DomainBlockUpdateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the domain block update params
func (o *DomainBlockUpdateParams) WithTimeout(timeout time.Duration) *DomainBlockUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the domain block update params
func (o *DomainBlockUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the domain block update params
func (o *DomainBlockUpdateParams) WithContext(ctx context.Context) *DomainBlockUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the domain block update params
func (o *DomainBlockUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the domain block update params
func (o *DomainBlockUpdateParams) WithHTTPClient(client *http.Client) *DomainBlockUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the domain block update params
func (o *DomainBlockUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the domain block update params
func (o *DomainBlockUpdateParams) WithID(id string) *DomainBlockUpdateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the domain block update params
func (o *DomainBlockUpdateParams) SetID(id string) {
	o.ID = id
}

// WithObfuscate adds the obfuscate to the domain block update params
func (o *DomainBlockUpdateParams) WithObfuscate(obfuscate *bool) *DomainBlockUpdateParams {
	o.SetObfuscate(obfuscate)
	return o
}

// SetObfuscate adds the obfuscate to the domain block update params
func (o *DomainBlockUpdateParams) SetObfuscate(obfuscate *bool) {
	o.Obfuscate = obfuscate
}

// WithPrivateComment adds the privateComment to the domain block update params
func (o *DomainBlockUpdateParams) WithPrivateComment(privateComment *string) *DomainBlockUpdateParams {
	o.SetPrivateComment(privateComment)
	return o
}

// SetPrivateComment adds the privateComment to the domain block update params
func (o *DomainBlockUpdateParams) SetPrivateComment(privateComment *string) {
	o.PrivateComment = privateComment
}

// WithPublicComment adds the publicComment to the domain block update params
func (o *DomainBlockUpdateParams) WithPublicComment(publicComment *string) *DomainBlockUpdateParams {
	o.SetPublicComment(publicComment)
	return o
}

// SetPublicComment adds the publicComment to the domain block update params
func (o *DomainBlockUpdateParams) SetPublicComment(publicComment *string) {
	o.PublicComment = publicComment
}

// WriteToRequest writes these params to a swagger request
func (o *DomainBlockUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Obfuscate != nil {

		// form param obfuscate
		var frObfuscate bool
		if o.Obfuscate != nil {
			frObfuscate = *o.Obfuscate
		}
		fObfuscate := swag.FormatBool(frObfuscate)
		if fObfuscate != "" {
			if err := r.SetFormParam("obfuscate", fObfuscate); err != nil {
				return err
			}
		}
	}

	if o.PrivateComment != nil {

		// form param private_comment
		var frPrivateComment string
		if o.PrivateComment != nil {
			frPrivateComment = *o.PrivateComment
		}
		fPrivateComment := frPrivateComment
		if fPrivateComment != "" {
			if err := r.SetFormParam("private_comment", fPrivateComment); err != nil {
				return err
			}
		}
	}

	if o.PublicComment != nil {

		// form param public_comment
		var frPublicComment string
		if o.PublicComment != nil {
			frPublicComment = *o.PublicComment
		}
		fPublicComment := frPublicComment
		if fPublicComment != "" {
			if err := r.SetFormParam("public_comment", fPublicComment); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
