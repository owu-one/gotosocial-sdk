// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// MediaRefetchReader is a Reader for the MediaRefetch structure.
type MediaRefetchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MediaRefetchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewMediaRefetchAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMediaRefetchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewMediaRefetchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMediaRefetchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMediaRefetchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewMediaRefetchNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMediaRefetchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/v1/admin/media_refetch] mediaRefetch", response, response.Code())
	}
}

// NewMediaRefetchAccepted creates a MediaRefetchAccepted with default headers values
func NewMediaRefetchAccepted() *MediaRefetchAccepted {
	return &MediaRefetchAccepted{}
}

/*
MediaRefetchAccepted describes a response with status code 202, with default header values.

Request accepted and will be processed. Check the logs for progress / errors.
*/
type MediaRefetchAccepted struct {
}

// IsSuccess returns true when this media refetch accepted response has a 2xx status code
func (o *MediaRefetchAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this media refetch accepted response has a 3xx status code
func (o *MediaRefetchAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media refetch accepted response has a 4xx status code
func (o *MediaRefetchAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this media refetch accepted response has a 5xx status code
func (o *MediaRefetchAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this media refetch accepted response a status code equal to that given
func (o *MediaRefetchAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the media refetch accepted response
func (o *MediaRefetchAccepted) Code() int {
	return 202
}

func (o *MediaRefetchAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchAccepted", 202)
}

func (o *MediaRefetchAccepted) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchAccepted", 202)
}

func (o *MediaRefetchAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRefetchBadRequest creates a MediaRefetchBadRequest with default headers values
func NewMediaRefetchBadRequest() *MediaRefetchBadRequest {
	return &MediaRefetchBadRequest{}
}

/*
MediaRefetchBadRequest describes a response with status code 400, with default header values.

bad request
*/
type MediaRefetchBadRequest struct {
}

// IsSuccess returns true when this media refetch bad request response has a 2xx status code
func (o *MediaRefetchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media refetch bad request response has a 3xx status code
func (o *MediaRefetchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media refetch bad request response has a 4xx status code
func (o *MediaRefetchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this media refetch bad request response has a 5xx status code
func (o *MediaRefetchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this media refetch bad request response a status code equal to that given
func (o *MediaRefetchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the media refetch bad request response
func (o *MediaRefetchBadRequest) Code() int {
	return 400
}

func (o *MediaRefetchBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchBadRequest", 400)
}

func (o *MediaRefetchBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchBadRequest", 400)
}

func (o *MediaRefetchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRefetchUnauthorized creates a MediaRefetchUnauthorized with default headers values
func NewMediaRefetchUnauthorized() *MediaRefetchUnauthorized {
	return &MediaRefetchUnauthorized{}
}

/*
MediaRefetchUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type MediaRefetchUnauthorized struct {
}

// IsSuccess returns true when this media refetch unauthorized response has a 2xx status code
func (o *MediaRefetchUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media refetch unauthorized response has a 3xx status code
func (o *MediaRefetchUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media refetch unauthorized response has a 4xx status code
func (o *MediaRefetchUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this media refetch unauthorized response has a 5xx status code
func (o *MediaRefetchUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this media refetch unauthorized response a status code equal to that given
func (o *MediaRefetchUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the media refetch unauthorized response
func (o *MediaRefetchUnauthorized) Code() int {
	return 401
}

func (o *MediaRefetchUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchUnauthorized", 401)
}

func (o *MediaRefetchUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchUnauthorized", 401)
}

func (o *MediaRefetchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRefetchForbidden creates a MediaRefetchForbidden with default headers values
func NewMediaRefetchForbidden() *MediaRefetchForbidden {
	return &MediaRefetchForbidden{}
}

/*
MediaRefetchForbidden describes a response with status code 403, with default header values.

forbidden
*/
type MediaRefetchForbidden struct {
}

// IsSuccess returns true when this media refetch forbidden response has a 2xx status code
func (o *MediaRefetchForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media refetch forbidden response has a 3xx status code
func (o *MediaRefetchForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media refetch forbidden response has a 4xx status code
func (o *MediaRefetchForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this media refetch forbidden response has a 5xx status code
func (o *MediaRefetchForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this media refetch forbidden response a status code equal to that given
func (o *MediaRefetchForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the media refetch forbidden response
func (o *MediaRefetchForbidden) Code() int {
	return 403
}

func (o *MediaRefetchForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchForbidden", 403)
}

func (o *MediaRefetchForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchForbidden", 403)
}

func (o *MediaRefetchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRefetchNotFound creates a MediaRefetchNotFound with default headers values
func NewMediaRefetchNotFound() *MediaRefetchNotFound {
	return &MediaRefetchNotFound{}
}

/*
MediaRefetchNotFound describes a response with status code 404, with default header values.

not found
*/
type MediaRefetchNotFound struct {
}

// IsSuccess returns true when this media refetch not found response has a 2xx status code
func (o *MediaRefetchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media refetch not found response has a 3xx status code
func (o *MediaRefetchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media refetch not found response has a 4xx status code
func (o *MediaRefetchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this media refetch not found response has a 5xx status code
func (o *MediaRefetchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this media refetch not found response a status code equal to that given
func (o *MediaRefetchNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the media refetch not found response
func (o *MediaRefetchNotFound) Code() int {
	return 404
}

func (o *MediaRefetchNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchNotFound", 404)
}

func (o *MediaRefetchNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchNotFound", 404)
}

func (o *MediaRefetchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRefetchNotAcceptable creates a MediaRefetchNotAcceptable with default headers values
func NewMediaRefetchNotAcceptable() *MediaRefetchNotAcceptable {
	return &MediaRefetchNotAcceptable{}
}

/*
MediaRefetchNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type MediaRefetchNotAcceptable struct {
}

// IsSuccess returns true when this media refetch not acceptable response has a 2xx status code
func (o *MediaRefetchNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media refetch not acceptable response has a 3xx status code
func (o *MediaRefetchNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media refetch not acceptable response has a 4xx status code
func (o *MediaRefetchNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this media refetch not acceptable response has a 5xx status code
func (o *MediaRefetchNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this media refetch not acceptable response a status code equal to that given
func (o *MediaRefetchNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the media refetch not acceptable response
func (o *MediaRefetchNotAcceptable) Code() int {
	return 406
}

func (o *MediaRefetchNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchNotAcceptable", 406)
}

func (o *MediaRefetchNotAcceptable) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchNotAcceptable", 406)
}

func (o *MediaRefetchNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMediaRefetchInternalServerError creates a MediaRefetchInternalServerError with default headers values
func NewMediaRefetchInternalServerError() *MediaRefetchInternalServerError {
	return &MediaRefetchInternalServerError{}
}

/*
MediaRefetchInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type MediaRefetchInternalServerError struct {
}

// IsSuccess returns true when this media refetch internal server error response has a 2xx status code
func (o *MediaRefetchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this media refetch internal server error response has a 3xx status code
func (o *MediaRefetchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this media refetch internal server error response has a 4xx status code
func (o *MediaRefetchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this media refetch internal server error response has a 5xx status code
func (o *MediaRefetchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this media refetch internal server error response a status code equal to that given
func (o *MediaRefetchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the media refetch internal server error response
func (o *MediaRefetchInternalServerError) Code() int {
	return 500
}

func (o *MediaRefetchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchInternalServerError", 500)
}

func (o *MediaRefetchInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/media_refetch][%d] mediaRefetchInternalServerError", 500)
}

func (o *MediaRefetchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
