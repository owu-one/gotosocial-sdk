// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// DomainPermissionSubscriptionTestReader is a Reader for the DomainPermissionSubscriptionTest structure.
type DomainPermissionSubscriptionTestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DomainPermissionSubscriptionTestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDomainPermissionSubscriptionTestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDomainPermissionSubscriptionTestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDomainPermissionSubscriptionTestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDomainPermissionSubscriptionTestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewDomainPermissionSubscriptionTestNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDomainPermissionSubscriptionTestConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDomainPermissionSubscriptionTestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test] domainPermissionSubscriptionTest", response, response.Code())
	}
}

// NewDomainPermissionSubscriptionTestOK creates a DomainPermissionSubscriptionTestOK with default headers values
func NewDomainPermissionSubscriptionTestOK() *DomainPermissionSubscriptionTestOK {
	return &DomainPermissionSubscriptionTestOK{}
}

/*
DomainPermissionSubscriptionTestOK describes a response with status code 200, with default header values.

Either an array of domain permissions, OR an error message of the form `{"error":"[ERROR MESSAGE HERE]"}` indicating why the list could not be fetched.
*/
type DomainPermissionSubscriptionTestOK struct {
	Payload []*models.Domain
}

// IsSuccess returns true when this domain permission subscription test o k response has a 2xx status code
func (o *DomainPermissionSubscriptionTestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this domain permission subscription test o k response has a 3xx status code
func (o *DomainPermissionSubscriptionTestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain permission subscription test o k response has a 4xx status code
func (o *DomainPermissionSubscriptionTestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this domain permission subscription test o k response has a 5xx status code
func (o *DomainPermissionSubscriptionTestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this domain permission subscription test o k response a status code equal to that given
func (o *DomainPermissionSubscriptionTestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the domain permission subscription test o k response
func (o *DomainPermissionSubscriptionTestOK) Code() int {
	return 200
}

func (o *DomainPermissionSubscriptionTestOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestOK %s", 200, payload)
}

func (o *DomainPermissionSubscriptionTestOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestOK %s", 200, payload)
}

func (o *DomainPermissionSubscriptionTestOK) GetPayload() []*models.Domain {
	return o.Payload
}

func (o *DomainPermissionSubscriptionTestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDomainPermissionSubscriptionTestBadRequest creates a DomainPermissionSubscriptionTestBadRequest with default headers values
func NewDomainPermissionSubscriptionTestBadRequest() *DomainPermissionSubscriptionTestBadRequest {
	return &DomainPermissionSubscriptionTestBadRequest{}
}

/*
DomainPermissionSubscriptionTestBadRequest describes a response with status code 400, with default header values.

bad request
*/
type DomainPermissionSubscriptionTestBadRequest struct {
}

// IsSuccess returns true when this domain permission subscription test bad request response has a 2xx status code
func (o *DomainPermissionSubscriptionTestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain permission subscription test bad request response has a 3xx status code
func (o *DomainPermissionSubscriptionTestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain permission subscription test bad request response has a 4xx status code
func (o *DomainPermissionSubscriptionTestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain permission subscription test bad request response has a 5xx status code
func (o *DomainPermissionSubscriptionTestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this domain permission subscription test bad request response a status code equal to that given
func (o *DomainPermissionSubscriptionTestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the domain permission subscription test bad request response
func (o *DomainPermissionSubscriptionTestBadRequest) Code() int {
	return 400
}

func (o *DomainPermissionSubscriptionTestBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestBadRequest", 400)
}

func (o *DomainPermissionSubscriptionTestBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestBadRequest", 400)
}

func (o *DomainPermissionSubscriptionTestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainPermissionSubscriptionTestUnauthorized creates a DomainPermissionSubscriptionTestUnauthorized with default headers values
func NewDomainPermissionSubscriptionTestUnauthorized() *DomainPermissionSubscriptionTestUnauthorized {
	return &DomainPermissionSubscriptionTestUnauthorized{}
}

/*
DomainPermissionSubscriptionTestUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type DomainPermissionSubscriptionTestUnauthorized struct {
}

// IsSuccess returns true when this domain permission subscription test unauthorized response has a 2xx status code
func (o *DomainPermissionSubscriptionTestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain permission subscription test unauthorized response has a 3xx status code
func (o *DomainPermissionSubscriptionTestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain permission subscription test unauthorized response has a 4xx status code
func (o *DomainPermissionSubscriptionTestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain permission subscription test unauthorized response has a 5xx status code
func (o *DomainPermissionSubscriptionTestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this domain permission subscription test unauthorized response a status code equal to that given
func (o *DomainPermissionSubscriptionTestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the domain permission subscription test unauthorized response
func (o *DomainPermissionSubscriptionTestUnauthorized) Code() int {
	return 401
}

func (o *DomainPermissionSubscriptionTestUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestUnauthorized", 401)
}

func (o *DomainPermissionSubscriptionTestUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestUnauthorized", 401)
}

func (o *DomainPermissionSubscriptionTestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainPermissionSubscriptionTestForbidden creates a DomainPermissionSubscriptionTestForbidden with default headers values
func NewDomainPermissionSubscriptionTestForbidden() *DomainPermissionSubscriptionTestForbidden {
	return &DomainPermissionSubscriptionTestForbidden{}
}

/*
DomainPermissionSubscriptionTestForbidden describes a response with status code 403, with default header values.

forbidden
*/
type DomainPermissionSubscriptionTestForbidden struct {
}

// IsSuccess returns true when this domain permission subscription test forbidden response has a 2xx status code
func (o *DomainPermissionSubscriptionTestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain permission subscription test forbidden response has a 3xx status code
func (o *DomainPermissionSubscriptionTestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain permission subscription test forbidden response has a 4xx status code
func (o *DomainPermissionSubscriptionTestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain permission subscription test forbidden response has a 5xx status code
func (o *DomainPermissionSubscriptionTestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this domain permission subscription test forbidden response a status code equal to that given
func (o *DomainPermissionSubscriptionTestForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the domain permission subscription test forbidden response
func (o *DomainPermissionSubscriptionTestForbidden) Code() int {
	return 403
}

func (o *DomainPermissionSubscriptionTestForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestForbidden", 403)
}

func (o *DomainPermissionSubscriptionTestForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestForbidden", 403)
}

func (o *DomainPermissionSubscriptionTestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainPermissionSubscriptionTestNotAcceptable creates a DomainPermissionSubscriptionTestNotAcceptable with default headers values
func NewDomainPermissionSubscriptionTestNotAcceptable() *DomainPermissionSubscriptionTestNotAcceptable {
	return &DomainPermissionSubscriptionTestNotAcceptable{}
}

/*
DomainPermissionSubscriptionTestNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type DomainPermissionSubscriptionTestNotAcceptable struct {
}

// IsSuccess returns true when this domain permission subscription test not acceptable response has a 2xx status code
func (o *DomainPermissionSubscriptionTestNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain permission subscription test not acceptable response has a 3xx status code
func (o *DomainPermissionSubscriptionTestNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain permission subscription test not acceptable response has a 4xx status code
func (o *DomainPermissionSubscriptionTestNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain permission subscription test not acceptable response has a 5xx status code
func (o *DomainPermissionSubscriptionTestNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this domain permission subscription test not acceptable response a status code equal to that given
func (o *DomainPermissionSubscriptionTestNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the domain permission subscription test not acceptable response
func (o *DomainPermissionSubscriptionTestNotAcceptable) Code() int {
	return 406
}

func (o *DomainPermissionSubscriptionTestNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestNotAcceptable", 406)
}

func (o *DomainPermissionSubscriptionTestNotAcceptable) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestNotAcceptable", 406)
}

func (o *DomainPermissionSubscriptionTestNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainPermissionSubscriptionTestConflict creates a DomainPermissionSubscriptionTestConflict with default headers values
func NewDomainPermissionSubscriptionTestConflict() *DomainPermissionSubscriptionTestConflict {
	return &DomainPermissionSubscriptionTestConflict{}
}

/*
DomainPermissionSubscriptionTestConflict describes a response with status code 409, with default header values.

conflict
*/
type DomainPermissionSubscriptionTestConflict struct {
}

// IsSuccess returns true when this domain permission subscription test conflict response has a 2xx status code
func (o *DomainPermissionSubscriptionTestConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain permission subscription test conflict response has a 3xx status code
func (o *DomainPermissionSubscriptionTestConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain permission subscription test conflict response has a 4xx status code
func (o *DomainPermissionSubscriptionTestConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this domain permission subscription test conflict response has a 5xx status code
func (o *DomainPermissionSubscriptionTestConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this domain permission subscription test conflict response a status code equal to that given
func (o *DomainPermissionSubscriptionTestConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the domain permission subscription test conflict response
func (o *DomainPermissionSubscriptionTestConflict) Code() int {
	return 409
}

func (o *DomainPermissionSubscriptionTestConflict) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestConflict", 409)
}

func (o *DomainPermissionSubscriptionTestConflict) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestConflict", 409)
}

func (o *DomainPermissionSubscriptionTestConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDomainPermissionSubscriptionTestInternalServerError creates a DomainPermissionSubscriptionTestInternalServerError with default headers values
func NewDomainPermissionSubscriptionTestInternalServerError() *DomainPermissionSubscriptionTestInternalServerError {
	return &DomainPermissionSubscriptionTestInternalServerError{}
}

/*
DomainPermissionSubscriptionTestInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type DomainPermissionSubscriptionTestInternalServerError struct {
}

// IsSuccess returns true when this domain permission subscription test internal server error response has a 2xx status code
func (o *DomainPermissionSubscriptionTestInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this domain permission subscription test internal server error response has a 3xx status code
func (o *DomainPermissionSubscriptionTestInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this domain permission subscription test internal server error response has a 4xx status code
func (o *DomainPermissionSubscriptionTestInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this domain permission subscription test internal server error response has a 5xx status code
func (o *DomainPermissionSubscriptionTestInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this domain permission subscription test internal server error response a status code equal to that given
func (o *DomainPermissionSubscriptionTestInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the domain permission subscription test internal server error response
func (o *DomainPermissionSubscriptionTestInternalServerError) Code() int {
	return 500
}

func (o *DomainPermissionSubscriptionTestInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestInternalServerError", 500)
}

func (o *DomainPermissionSubscriptionTestInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/admin/domain_permission_subscriptions/{id}/test][%d] domainPermissionSubscriptionTestInternalServerError", 500)
}

func (o *DomainPermissionSubscriptionTestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
