// Code generated by go-swagger; DO NOT EDIT.

package interaction_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new interaction requests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new interaction requests API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new interaction requests API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for interaction requests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AuthorizeInteractionRequest(params *AuthorizeInteractionRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthorizeInteractionRequestOK, error)

	GetInteractionRequest(params *GetInteractionRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionRequestOK, error)

	GetInteractionRequests(params *GetInteractionRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionRequestsOK, error)

	RejectInteractionRequest(params *RejectInteractionRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInteractionRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AuthorizeInteractionRequest accepts authorize approve an interaction request with the given ID
*/
func (a *Client) AuthorizeInteractionRequest(params *AuthorizeInteractionRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthorizeInteractionRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizeInteractionRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authorizeInteractionRequest",
		Method:             "POST",
		PathPattern:        "/api/v1/interaction_requests/{id}/authorize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthorizeInteractionRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizeInteractionRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorizeInteractionRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInteractionRequest gets interaction request with the given ID
*/
func (a *Client) GetInteractionRequest(params *GetInteractionRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInteractionRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInteractionRequest",
		Method:             "GET",
		PathPattern:        "/api/v1/interaction_requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInteractionRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInteractionRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInteractionRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetInteractionRequests gets an array of interactions requested on your statuses by other accounts and pending your approval

	```

<https://example.org/api/v1/interaction_requests?limit=80&max_id=01FC0SKA48HNSVR6YKZCQGS2V8>; rel="next", <https://example.org/api/v1/interaction_requests?limit=80&min_id=01FC0SKW5JK2Q4EVAV2B462YY0>; rel="prev"
````
*/
func (a *Client) GetInteractionRequests(params *GetInteractionRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInteractionRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInteractionRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInteractionRequests",
		Method:             "GET",
		PathPattern:        "/api/v1/interaction_requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInteractionRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInteractionRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInteractionRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectInteractionRequest rejects an interaction request with the given ID
*/
func (a *Client) RejectInteractionRequest(params *RejectInteractionRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInteractionRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectInteractionRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectInteractionRequest",
		Method:             "POST",
		PathPattern:        "/api/v1/interaction_requests/{id}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RejectInteractionRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectInteractionRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectInteractionRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
