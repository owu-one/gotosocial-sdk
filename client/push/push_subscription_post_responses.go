// Code generated by go-swagger; DO NOT EDIT.

package push

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// PushSubscriptionPostReader is a Reader for the PushSubscriptionPost structure.
type PushSubscriptionPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PushSubscriptionPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPushSubscriptionPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPushSubscriptionPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPushSubscriptionPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPushSubscriptionPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPushSubscriptionPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewPushSubscriptionPostNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPushSubscriptionPostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/v1/push/subscription] pushSubscriptionPost", response, response.Code())
	}
}

// NewPushSubscriptionPostOK creates a PushSubscriptionPostOK with default headers values
func NewPushSubscriptionPostOK() *PushSubscriptionPostOK {
	return &PushSubscriptionPostOK{}
}

/*
PushSubscriptionPostOK describes a response with status code 200, with default header values.

Web Push subscription for current access token.
*/
type PushSubscriptionPostOK struct {
	Payload *models.WebPushSubscription
}

// IsSuccess returns true when this push subscription post o k response has a 2xx status code
func (o *PushSubscriptionPostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this push subscription post o k response has a 3xx status code
func (o *PushSubscriptionPostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription post o k response has a 4xx status code
func (o *PushSubscriptionPostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this push subscription post o k response has a 5xx status code
func (o *PushSubscriptionPostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription post o k response a status code equal to that given
func (o *PushSubscriptionPostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the push subscription post o k response
func (o *PushSubscriptionPostOK) Code() int {
	return 200
}

func (o *PushSubscriptionPostOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostOK %s", 200, payload)
}

func (o *PushSubscriptionPostOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostOK %s", 200, payload)
}

func (o *PushSubscriptionPostOK) GetPayload() *models.WebPushSubscription {
	return o.Payload
}

func (o *PushSubscriptionPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebPushSubscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushSubscriptionPostBadRequest creates a PushSubscriptionPostBadRequest with default headers values
func NewPushSubscriptionPostBadRequest() *PushSubscriptionPostBadRequest {
	return &PushSubscriptionPostBadRequest{}
}

/*
PushSubscriptionPostBadRequest describes a response with status code 400, with default header values.

bad request
*/
type PushSubscriptionPostBadRequest struct {
}

// IsSuccess returns true when this push subscription post bad request response has a 2xx status code
func (o *PushSubscriptionPostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription post bad request response has a 3xx status code
func (o *PushSubscriptionPostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription post bad request response has a 4xx status code
func (o *PushSubscriptionPostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription post bad request response has a 5xx status code
func (o *PushSubscriptionPostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription post bad request response a status code equal to that given
func (o *PushSubscriptionPostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the push subscription post bad request response
func (o *PushSubscriptionPostBadRequest) Code() int {
	return 400
}

func (o *PushSubscriptionPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostBadRequest", 400)
}

func (o *PushSubscriptionPostBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostBadRequest", 400)
}

func (o *PushSubscriptionPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPostUnauthorized creates a PushSubscriptionPostUnauthorized with default headers values
func NewPushSubscriptionPostUnauthorized() *PushSubscriptionPostUnauthorized {
	return &PushSubscriptionPostUnauthorized{}
}

/*
PushSubscriptionPostUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type PushSubscriptionPostUnauthorized struct {
}

// IsSuccess returns true when this push subscription post unauthorized response has a 2xx status code
func (o *PushSubscriptionPostUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription post unauthorized response has a 3xx status code
func (o *PushSubscriptionPostUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription post unauthorized response has a 4xx status code
func (o *PushSubscriptionPostUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription post unauthorized response has a 5xx status code
func (o *PushSubscriptionPostUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription post unauthorized response a status code equal to that given
func (o *PushSubscriptionPostUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the push subscription post unauthorized response
func (o *PushSubscriptionPostUnauthorized) Code() int {
	return 401
}

func (o *PushSubscriptionPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostUnauthorized", 401)
}

func (o *PushSubscriptionPostUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostUnauthorized", 401)
}

func (o *PushSubscriptionPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPostForbidden creates a PushSubscriptionPostForbidden with default headers values
func NewPushSubscriptionPostForbidden() *PushSubscriptionPostForbidden {
	return &PushSubscriptionPostForbidden{}
}

/*
PushSubscriptionPostForbidden describes a response with status code 403, with default header values.

forbidden
*/
type PushSubscriptionPostForbidden struct {
}

// IsSuccess returns true when this push subscription post forbidden response has a 2xx status code
func (o *PushSubscriptionPostForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription post forbidden response has a 3xx status code
func (o *PushSubscriptionPostForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription post forbidden response has a 4xx status code
func (o *PushSubscriptionPostForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription post forbidden response has a 5xx status code
func (o *PushSubscriptionPostForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription post forbidden response a status code equal to that given
func (o *PushSubscriptionPostForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the push subscription post forbidden response
func (o *PushSubscriptionPostForbidden) Code() int {
	return 403
}

func (o *PushSubscriptionPostForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostForbidden", 403)
}

func (o *PushSubscriptionPostForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostForbidden", 403)
}

func (o *PushSubscriptionPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPostNotFound creates a PushSubscriptionPostNotFound with default headers values
func NewPushSubscriptionPostNotFound() *PushSubscriptionPostNotFound {
	return &PushSubscriptionPostNotFound{}
}

/*
PushSubscriptionPostNotFound describes a response with status code 404, with default header values.

not found
*/
type PushSubscriptionPostNotFound struct {
}

// IsSuccess returns true when this push subscription post not found response has a 2xx status code
func (o *PushSubscriptionPostNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription post not found response has a 3xx status code
func (o *PushSubscriptionPostNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription post not found response has a 4xx status code
func (o *PushSubscriptionPostNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription post not found response has a 5xx status code
func (o *PushSubscriptionPostNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription post not found response a status code equal to that given
func (o *PushSubscriptionPostNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the push subscription post not found response
func (o *PushSubscriptionPostNotFound) Code() int {
	return 404
}

func (o *PushSubscriptionPostNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostNotFound", 404)
}

func (o *PushSubscriptionPostNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostNotFound", 404)
}

func (o *PushSubscriptionPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPostNotAcceptable creates a PushSubscriptionPostNotAcceptable with default headers values
func NewPushSubscriptionPostNotAcceptable() *PushSubscriptionPostNotAcceptable {
	return &PushSubscriptionPostNotAcceptable{}
}

/*
PushSubscriptionPostNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type PushSubscriptionPostNotAcceptable struct {
}

// IsSuccess returns true when this push subscription post not acceptable response has a 2xx status code
func (o *PushSubscriptionPostNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription post not acceptable response has a 3xx status code
func (o *PushSubscriptionPostNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription post not acceptable response has a 4xx status code
func (o *PushSubscriptionPostNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription post not acceptable response has a 5xx status code
func (o *PushSubscriptionPostNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription post not acceptable response a status code equal to that given
func (o *PushSubscriptionPostNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the push subscription post not acceptable response
func (o *PushSubscriptionPostNotAcceptable) Code() int {
	return 406
}

func (o *PushSubscriptionPostNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostNotAcceptable", 406)
}

func (o *PushSubscriptionPostNotAcceptable) String() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostNotAcceptable", 406)
}

func (o *PushSubscriptionPostNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPostInternalServerError creates a PushSubscriptionPostInternalServerError with default headers values
func NewPushSubscriptionPostInternalServerError() *PushSubscriptionPostInternalServerError {
	return &PushSubscriptionPostInternalServerError{}
}

/*
PushSubscriptionPostInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type PushSubscriptionPostInternalServerError struct {
}

// IsSuccess returns true when this push subscription post internal server error response has a 2xx status code
func (o *PushSubscriptionPostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription post internal server error response has a 3xx status code
func (o *PushSubscriptionPostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription post internal server error response has a 4xx status code
func (o *PushSubscriptionPostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this push subscription post internal server error response has a 5xx status code
func (o *PushSubscriptionPostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this push subscription post internal server error response a status code equal to that given
func (o *PushSubscriptionPostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the push subscription post internal server error response
func (o *PushSubscriptionPostInternalServerError) Code() int {
	return 500
}

func (o *PushSubscriptionPostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostInternalServerError", 500)
}

func (o *PushSubscriptionPostInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/push/subscription][%d] pushSubscriptionPostInternalServerError", 500)
}

func (o *PushSubscriptionPostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
