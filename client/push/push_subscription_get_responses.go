// Code generated by go-swagger; DO NOT EDIT.

package push

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// PushSubscriptionGetReader is a Reader for the PushSubscriptionGet structure.
type PushSubscriptionGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PushSubscriptionGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPushSubscriptionGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPushSubscriptionGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPushSubscriptionGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPushSubscriptionGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPushSubscriptionGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/push/subscription] pushSubscriptionGet", response, response.Code())
	}
}

// NewPushSubscriptionGetOK creates a PushSubscriptionGetOK with default headers values
func NewPushSubscriptionGetOK() *PushSubscriptionGetOK {
	return &PushSubscriptionGetOK{}
}

/*
PushSubscriptionGetOK describes a response with status code 200, with default header values.

Web Push subscription for current access token.
*/
type PushSubscriptionGetOK struct {
	Payload *models.WebPushSubscription
}

// IsSuccess returns true when this push subscription get o k response has a 2xx status code
func (o *PushSubscriptionGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this push subscription get o k response has a 3xx status code
func (o *PushSubscriptionGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription get o k response has a 4xx status code
func (o *PushSubscriptionGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this push subscription get o k response has a 5xx status code
func (o *PushSubscriptionGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription get o k response a status code equal to that given
func (o *PushSubscriptionGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the push subscription get o k response
func (o *PushSubscriptionGetOK) Code() int {
	return 200
}

func (o *PushSubscriptionGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetOK %s", 200, payload)
}

func (o *PushSubscriptionGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetOK %s", 200, payload)
}

func (o *PushSubscriptionGetOK) GetPayload() *models.WebPushSubscription {
	return o.Payload
}

func (o *PushSubscriptionGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebPushSubscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushSubscriptionGetBadRequest creates a PushSubscriptionGetBadRequest with default headers values
func NewPushSubscriptionGetBadRequest() *PushSubscriptionGetBadRequest {
	return &PushSubscriptionGetBadRequest{}
}

/*
PushSubscriptionGetBadRequest describes a response with status code 400, with default header values.

bad request
*/
type PushSubscriptionGetBadRequest struct {
}

// IsSuccess returns true when this push subscription get bad request response has a 2xx status code
func (o *PushSubscriptionGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription get bad request response has a 3xx status code
func (o *PushSubscriptionGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription get bad request response has a 4xx status code
func (o *PushSubscriptionGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription get bad request response has a 5xx status code
func (o *PushSubscriptionGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription get bad request response a status code equal to that given
func (o *PushSubscriptionGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the push subscription get bad request response
func (o *PushSubscriptionGetBadRequest) Code() int {
	return 400
}

func (o *PushSubscriptionGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetBadRequest", 400)
}

func (o *PushSubscriptionGetBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetBadRequest", 400)
}

func (o *PushSubscriptionGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionGetUnauthorized creates a PushSubscriptionGetUnauthorized with default headers values
func NewPushSubscriptionGetUnauthorized() *PushSubscriptionGetUnauthorized {
	return &PushSubscriptionGetUnauthorized{}
}

/*
PushSubscriptionGetUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type PushSubscriptionGetUnauthorized struct {
}

// IsSuccess returns true when this push subscription get unauthorized response has a 2xx status code
func (o *PushSubscriptionGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription get unauthorized response has a 3xx status code
func (o *PushSubscriptionGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription get unauthorized response has a 4xx status code
func (o *PushSubscriptionGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription get unauthorized response has a 5xx status code
func (o *PushSubscriptionGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription get unauthorized response a status code equal to that given
func (o *PushSubscriptionGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the push subscription get unauthorized response
func (o *PushSubscriptionGetUnauthorized) Code() int {
	return 401
}

func (o *PushSubscriptionGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetUnauthorized", 401)
}

func (o *PushSubscriptionGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetUnauthorized", 401)
}

func (o *PushSubscriptionGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionGetNotFound creates a PushSubscriptionGetNotFound with default headers values
func NewPushSubscriptionGetNotFound() *PushSubscriptionGetNotFound {
	return &PushSubscriptionGetNotFound{}
}

/*
PushSubscriptionGetNotFound describes a response with status code 404, with default header values.

This access token doesn't have an associated subscription.
*/
type PushSubscriptionGetNotFound struct {
}

// IsSuccess returns true when this push subscription get not found response has a 2xx status code
func (o *PushSubscriptionGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription get not found response has a 3xx status code
func (o *PushSubscriptionGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription get not found response has a 4xx status code
func (o *PushSubscriptionGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription get not found response has a 5xx status code
func (o *PushSubscriptionGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription get not found response a status code equal to that given
func (o *PushSubscriptionGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the push subscription get not found response
func (o *PushSubscriptionGetNotFound) Code() int {
	return 404
}

func (o *PushSubscriptionGetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetNotFound", 404)
}

func (o *PushSubscriptionGetNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetNotFound", 404)
}

func (o *PushSubscriptionGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionGetInternalServerError creates a PushSubscriptionGetInternalServerError with default headers values
func NewPushSubscriptionGetInternalServerError() *PushSubscriptionGetInternalServerError {
	return &PushSubscriptionGetInternalServerError{}
}

/*
PushSubscriptionGetInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type PushSubscriptionGetInternalServerError struct {
}

// IsSuccess returns true when this push subscription get internal server error response has a 2xx status code
func (o *PushSubscriptionGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription get internal server error response has a 3xx status code
func (o *PushSubscriptionGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription get internal server error response has a 4xx status code
func (o *PushSubscriptionGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this push subscription get internal server error response has a 5xx status code
func (o *PushSubscriptionGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this push subscription get internal server error response a status code equal to that given
func (o *PushSubscriptionGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the push subscription get internal server error response
func (o *PushSubscriptionGetInternalServerError) Code() int {
	return 500
}

func (o *PushSubscriptionGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetInternalServerError", 500)
}

func (o *PushSubscriptionGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/push/subscription][%d] pushSubscriptionGetInternalServerError", 500)
}

func (o *PushSubscriptionGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
