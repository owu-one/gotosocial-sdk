// Code generated by go-swagger; DO NOT EDIT.

package push

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPushSubscriptionPostParams creates a new PushSubscriptionPostParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPushSubscriptionPostParams() *PushSubscriptionPostParams {
	return &PushSubscriptionPostParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPushSubscriptionPostParamsWithTimeout creates a new PushSubscriptionPostParams object
// with the ability to set a timeout on a request.
func NewPushSubscriptionPostParamsWithTimeout(timeout time.Duration) *PushSubscriptionPostParams {
	return &PushSubscriptionPostParams{
		timeout: timeout,
	}
}

// NewPushSubscriptionPostParamsWithContext creates a new PushSubscriptionPostParams object
// with the ability to set a context for a request.
func NewPushSubscriptionPostParamsWithContext(ctx context.Context) *PushSubscriptionPostParams {
	return &PushSubscriptionPostParams{
		Context: ctx,
	}
}

// NewPushSubscriptionPostParamsWithHTTPClient creates a new PushSubscriptionPostParams object
// with the ability to set a custom HTTPClient for a request.
func NewPushSubscriptionPostParamsWithHTTPClient(client *http.Client) *PushSubscriptionPostParams {
	return &PushSubscriptionPostParams{
		HTTPClient: client,
	}
}

/*
PushSubscriptionPostParams contains all the parameters to send to the API endpoint

	for the push subscription post operation.

	Typically these are written to a http.Request.
*/
type PushSubscriptionPostParams struct {

	/* DataAlertsAdminReport.

	   Receive a push notification when a new report has been filed?
	*/
	DataAlertsAdminReport *bool

	/* DataAlertsAdminSignUp.

	   Receive a push notification when a new user has signed up?
	*/
	DataAlertsAdminSignUp *bool

	/* DataAlertsFavourite.

	   Receive a push notification when a status you created has been favourited by someone else?
	*/
	DataAlertsFavourite *bool

	/* DataAlertsFollow.

	   Receive a push notification when someone has followed you?
	*/
	DataAlertsFollow *bool

	/* DataAlertsFollowRequest.

	   Receive a push notification when someone has requested to follow you?
	*/
	DataAlertsFollowRequest *bool

	/* DataAlertsMention.

	   Receive a push notification when someone else has mentioned you in a status?
	*/
	DataAlertsMention *bool

	/* DataAlertsPendingFavourite.

	   Receive a push notification when a fave is pending?
	*/
	DataAlertsPendingFavourite *bool

	/* DataAlertsPendingReblog.

	   Receive a push notification when a boost is pending?
	*/
	DataAlertsPendingReblog *bool

	/* DataAlertsPendingReply.

	   Receive a push notification when a reply is pending?
	*/
	DataAlertsPendingReply *bool

	/* DataAlertsPoll.

	   Receive a push notification when a poll you voted in or created has ended?
	*/
	DataAlertsPoll *bool

	/* DataAlertsReblog.

	   Receive a push notification when a status you created has been boosted by someone else?
	*/
	DataAlertsReblog *bool

	/* DataAlertsStatus.

	   Receive a push notification when a subscribed account posts a status?
	*/
	DataAlertsStatus *bool

	/* DataAlertsUpdate.

	   Receive a push notification when a status you interacted with has been edited?
	*/
	DataAlertsUpdate *bool

	/* DataPolicy.

	   Which accounts to receive push notifications from.

	   Default: "all"
	*/
	DataPolicy *string

	/* SubscriptionEndpoint.

	   The URL to which Web Push notifications will be sent.
	*/
	SubscriptionEndpoint string

	/* SubscriptionKeysAuth.

	   The auth secret, a Base64 encoded string of 16 bytes of random data.
	*/
	SubscriptionKeysAuth string

	/* SubscriptionKeysP256dh.

	   The user agent public key, a Base64 encoded string of a public key from an ECDH keypair using the prime256v1 curve.
	*/
	SubscriptionKeysP256dh string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the push subscription post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PushSubscriptionPostParams) WithDefaults() *PushSubscriptionPostParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the push subscription post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PushSubscriptionPostParams) SetDefaults() {
	var (
		dataAlertsAdminReportDefault = bool(false)

		dataAlertsAdminSignUpDefault = bool(false)

		dataAlertsFavouriteDefault = bool(false)

		dataAlertsFollowDefault = bool(false)

		dataAlertsFollowRequestDefault = bool(false)

		dataAlertsMentionDefault = bool(false)

		dataAlertsPendingFavouriteDefault = bool(false)

		dataAlertsPendingReblogDefault = bool(false)

		dataAlertsPendingReplyDefault = bool(false)

		dataAlertsPollDefault = bool(false)

		dataAlertsReblogDefault = bool(false)

		dataAlertsStatusDefault = bool(false)

		dataAlertsUpdateDefault = bool(false)

		dataPolicyDefault = string("all")
	)

	val := PushSubscriptionPostParams{
		DataAlertsAdminReport:      &dataAlertsAdminReportDefault,
		DataAlertsAdminSignUp:      &dataAlertsAdminSignUpDefault,
		DataAlertsFavourite:        &dataAlertsFavouriteDefault,
		DataAlertsFollow:           &dataAlertsFollowDefault,
		DataAlertsFollowRequest:    &dataAlertsFollowRequestDefault,
		DataAlertsMention:          &dataAlertsMentionDefault,
		DataAlertsPendingFavourite: &dataAlertsPendingFavouriteDefault,
		DataAlertsPendingReblog:    &dataAlertsPendingReblogDefault,
		DataAlertsPendingReply:     &dataAlertsPendingReplyDefault,
		DataAlertsPoll:             &dataAlertsPollDefault,
		DataAlertsReblog:           &dataAlertsReblogDefault,
		DataAlertsStatus:           &dataAlertsStatusDefault,
		DataAlertsUpdate:           &dataAlertsUpdateDefault,
		DataPolicy:                 &dataPolicyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the push subscription post params
func (o *PushSubscriptionPostParams) WithTimeout(timeout time.Duration) *PushSubscriptionPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the push subscription post params
func (o *PushSubscriptionPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the push subscription post params
func (o *PushSubscriptionPostParams) WithContext(ctx context.Context) *PushSubscriptionPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the push subscription post params
func (o *PushSubscriptionPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the push subscription post params
func (o *PushSubscriptionPostParams) WithHTTPClient(client *http.Client) *PushSubscriptionPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the push subscription post params
func (o *PushSubscriptionPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDataAlertsAdminReport adds the dataAlertsAdminReport to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsAdminReport(dataAlertsAdminReport *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsAdminReport(dataAlertsAdminReport)
	return o
}

// SetDataAlertsAdminReport adds the dataAlertsAdminReport to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsAdminReport(dataAlertsAdminReport *bool) {
	o.DataAlertsAdminReport = dataAlertsAdminReport
}

// WithDataAlertsAdminSignUp adds the dataAlertsAdminSignUp to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsAdminSignUp(dataAlertsAdminSignUp *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsAdminSignUp(dataAlertsAdminSignUp)
	return o
}

// SetDataAlertsAdminSignUp adds the dataAlertsAdminSignUp to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsAdminSignUp(dataAlertsAdminSignUp *bool) {
	o.DataAlertsAdminSignUp = dataAlertsAdminSignUp
}

// WithDataAlertsFavourite adds the dataAlertsFavourite to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsFavourite(dataAlertsFavourite *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsFavourite(dataAlertsFavourite)
	return o
}

// SetDataAlertsFavourite adds the dataAlertsFavourite to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsFavourite(dataAlertsFavourite *bool) {
	o.DataAlertsFavourite = dataAlertsFavourite
}

// WithDataAlertsFollow adds the dataAlertsFollow to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsFollow(dataAlertsFollow *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsFollow(dataAlertsFollow)
	return o
}

// SetDataAlertsFollow adds the dataAlertsFollow to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsFollow(dataAlertsFollow *bool) {
	o.DataAlertsFollow = dataAlertsFollow
}

// WithDataAlertsFollowRequest adds the dataAlertsFollowRequest to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsFollowRequest(dataAlertsFollowRequest *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsFollowRequest(dataAlertsFollowRequest)
	return o
}

// SetDataAlertsFollowRequest adds the dataAlertsFollowRequest to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsFollowRequest(dataAlertsFollowRequest *bool) {
	o.DataAlertsFollowRequest = dataAlertsFollowRequest
}

// WithDataAlertsMention adds the dataAlertsMention to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsMention(dataAlertsMention *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsMention(dataAlertsMention)
	return o
}

// SetDataAlertsMention adds the dataAlertsMention to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsMention(dataAlertsMention *bool) {
	o.DataAlertsMention = dataAlertsMention
}

// WithDataAlertsPendingFavourite adds the dataAlertsPendingFavourite to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsPendingFavourite(dataAlertsPendingFavourite *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsPendingFavourite(dataAlertsPendingFavourite)
	return o
}

// SetDataAlertsPendingFavourite adds the dataAlertsPendingFavourite to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsPendingFavourite(dataAlertsPendingFavourite *bool) {
	o.DataAlertsPendingFavourite = dataAlertsPendingFavourite
}

// WithDataAlertsPendingReblog adds the dataAlertsPendingReblog to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsPendingReblog(dataAlertsPendingReblog *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsPendingReblog(dataAlertsPendingReblog)
	return o
}

// SetDataAlertsPendingReblog adds the dataAlertsPendingReblog to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsPendingReblog(dataAlertsPendingReblog *bool) {
	o.DataAlertsPendingReblog = dataAlertsPendingReblog
}

// WithDataAlertsPendingReply adds the dataAlertsPendingReply to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsPendingReply(dataAlertsPendingReply *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsPendingReply(dataAlertsPendingReply)
	return o
}

// SetDataAlertsPendingReply adds the dataAlertsPendingReply to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsPendingReply(dataAlertsPendingReply *bool) {
	o.DataAlertsPendingReply = dataAlertsPendingReply
}

// WithDataAlertsPoll adds the dataAlertsPoll to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsPoll(dataAlertsPoll *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsPoll(dataAlertsPoll)
	return o
}

// SetDataAlertsPoll adds the dataAlertsPoll to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsPoll(dataAlertsPoll *bool) {
	o.DataAlertsPoll = dataAlertsPoll
}

// WithDataAlertsReblog adds the dataAlertsReblog to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsReblog(dataAlertsReblog *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsReblog(dataAlertsReblog)
	return o
}

// SetDataAlertsReblog adds the dataAlertsReblog to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsReblog(dataAlertsReblog *bool) {
	o.DataAlertsReblog = dataAlertsReblog
}

// WithDataAlertsStatus adds the dataAlertsStatus to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsStatus(dataAlertsStatus *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsStatus(dataAlertsStatus)
	return o
}

// SetDataAlertsStatus adds the dataAlertsStatus to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsStatus(dataAlertsStatus *bool) {
	o.DataAlertsStatus = dataAlertsStatus
}

// WithDataAlertsUpdate adds the dataAlertsUpdate to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataAlertsUpdate(dataAlertsUpdate *bool) *PushSubscriptionPostParams {
	o.SetDataAlertsUpdate(dataAlertsUpdate)
	return o
}

// SetDataAlertsUpdate adds the dataAlertsUpdate to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataAlertsUpdate(dataAlertsUpdate *bool) {
	o.DataAlertsUpdate = dataAlertsUpdate
}

// WithDataPolicy adds the dataPolicy to the push subscription post params
func (o *PushSubscriptionPostParams) WithDataPolicy(dataPolicy *string) *PushSubscriptionPostParams {
	o.SetDataPolicy(dataPolicy)
	return o
}

// SetDataPolicy adds the dataPolicy to the push subscription post params
func (o *PushSubscriptionPostParams) SetDataPolicy(dataPolicy *string) {
	o.DataPolicy = dataPolicy
}

// WithSubscriptionEndpoint adds the subscriptionEndpoint to the push subscription post params
func (o *PushSubscriptionPostParams) WithSubscriptionEndpoint(subscriptionEndpoint string) *PushSubscriptionPostParams {
	o.SetSubscriptionEndpoint(subscriptionEndpoint)
	return o
}

// SetSubscriptionEndpoint adds the subscriptionEndpoint to the push subscription post params
func (o *PushSubscriptionPostParams) SetSubscriptionEndpoint(subscriptionEndpoint string) {
	o.SubscriptionEndpoint = subscriptionEndpoint
}

// WithSubscriptionKeysAuth adds the subscriptionKeysAuth to the push subscription post params
func (o *PushSubscriptionPostParams) WithSubscriptionKeysAuth(subscriptionKeysAuth string) *PushSubscriptionPostParams {
	o.SetSubscriptionKeysAuth(subscriptionKeysAuth)
	return o
}

// SetSubscriptionKeysAuth adds the subscriptionKeysAuth to the push subscription post params
func (o *PushSubscriptionPostParams) SetSubscriptionKeysAuth(subscriptionKeysAuth string) {
	o.SubscriptionKeysAuth = subscriptionKeysAuth
}

// WithSubscriptionKeysP256dh adds the subscriptionKeysP256dh to the push subscription post params
func (o *PushSubscriptionPostParams) WithSubscriptionKeysP256dh(subscriptionKeysP256dh string) *PushSubscriptionPostParams {
	o.SetSubscriptionKeysP256dh(subscriptionKeysP256dh)
	return o
}

// SetSubscriptionKeysP256dh adds the subscriptionKeysP256dh to the push subscription post params
func (o *PushSubscriptionPostParams) SetSubscriptionKeysP256dh(subscriptionKeysP256dh string) {
	o.SubscriptionKeysP256dh = subscriptionKeysP256dh
}

// WriteToRequest writes these params to a swagger request
func (o *PushSubscriptionPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DataAlertsAdminReport != nil {

		// form param data[alerts][admin.report]
		var frDataAlertsAdminReport bool
		if o.DataAlertsAdminReport != nil {
			frDataAlertsAdminReport = *o.DataAlertsAdminReport
		}
		fDataAlertsAdminReport := swag.FormatBool(frDataAlertsAdminReport)
		if fDataAlertsAdminReport != "" {
			if err := r.SetFormParam("data[alerts][admin.report]", fDataAlertsAdminReport); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsAdminSignUp != nil {

		// form param data[alerts][admin.sign_up]
		var frDataAlertsAdminSignUp bool
		if o.DataAlertsAdminSignUp != nil {
			frDataAlertsAdminSignUp = *o.DataAlertsAdminSignUp
		}
		fDataAlertsAdminSignUp := swag.FormatBool(frDataAlertsAdminSignUp)
		if fDataAlertsAdminSignUp != "" {
			if err := r.SetFormParam("data[alerts][admin.sign_up]", fDataAlertsAdminSignUp); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsFavourite != nil {

		// form param data[alerts][favourite]
		var frDataAlertsFavourite bool
		if o.DataAlertsFavourite != nil {
			frDataAlertsFavourite = *o.DataAlertsFavourite
		}
		fDataAlertsFavourite := swag.FormatBool(frDataAlertsFavourite)
		if fDataAlertsFavourite != "" {
			if err := r.SetFormParam("data[alerts][favourite]", fDataAlertsFavourite); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsFollow != nil {

		// form param data[alerts][follow]
		var frDataAlertsFollow bool
		if o.DataAlertsFollow != nil {
			frDataAlertsFollow = *o.DataAlertsFollow
		}
		fDataAlertsFollow := swag.FormatBool(frDataAlertsFollow)
		if fDataAlertsFollow != "" {
			if err := r.SetFormParam("data[alerts][follow]", fDataAlertsFollow); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsFollowRequest != nil {

		// form param data[alerts][follow_request]
		var frDataAlertsFollowRequest bool
		if o.DataAlertsFollowRequest != nil {
			frDataAlertsFollowRequest = *o.DataAlertsFollowRequest
		}
		fDataAlertsFollowRequest := swag.FormatBool(frDataAlertsFollowRequest)
		if fDataAlertsFollowRequest != "" {
			if err := r.SetFormParam("data[alerts][follow_request]", fDataAlertsFollowRequest); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsMention != nil {

		// form param data[alerts][mention]
		var frDataAlertsMention bool
		if o.DataAlertsMention != nil {
			frDataAlertsMention = *o.DataAlertsMention
		}
		fDataAlertsMention := swag.FormatBool(frDataAlertsMention)
		if fDataAlertsMention != "" {
			if err := r.SetFormParam("data[alerts][mention]", fDataAlertsMention); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsPendingFavourite != nil {

		// form param data[alerts][pending.favourite]
		var frDataAlertsPendingFavourite bool
		if o.DataAlertsPendingFavourite != nil {
			frDataAlertsPendingFavourite = *o.DataAlertsPendingFavourite
		}
		fDataAlertsPendingFavourite := swag.FormatBool(frDataAlertsPendingFavourite)
		if fDataAlertsPendingFavourite != "" {
			if err := r.SetFormParam("data[alerts][pending.favourite]", fDataAlertsPendingFavourite); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsPendingReblog != nil {

		// form param data[alerts][pending.reblog]
		var frDataAlertsPendingReblog bool
		if o.DataAlertsPendingReblog != nil {
			frDataAlertsPendingReblog = *o.DataAlertsPendingReblog
		}
		fDataAlertsPendingReblog := swag.FormatBool(frDataAlertsPendingReblog)
		if fDataAlertsPendingReblog != "" {
			if err := r.SetFormParam("data[alerts][pending.reblog]", fDataAlertsPendingReblog); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsPendingReply != nil {

		// form param data[alerts][pending.reply]
		var frDataAlertsPendingReply bool
		if o.DataAlertsPendingReply != nil {
			frDataAlertsPendingReply = *o.DataAlertsPendingReply
		}
		fDataAlertsPendingReply := swag.FormatBool(frDataAlertsPendingReply)
		if fDataAlertsPendingReply != "" {
			if err := r.SetFormParam("data[alerts][pending.reply]", fDataAlertsPendingReply); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsPoll != nil {

		// form param data[alerts][poll]
		var frDataAlertsPoll bool
		if o.DataAlertsPoll != nil {
			frDataAlertsPoll = *o.DataAlertsPoll
		}
		fDataAlertsPoll := swag.FormatBool(frDataAlertsPoll)
		if fDataAlertsPoll != "" {
			if err := r.SetFormParam("data[alerts][poll]", fDataAlertsPoll); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsReblog != nil {

		// form param data[alerts][reblog]
		var frDataAlertsReblog bool
		if o.DataAlertsReblog != nil {
			frDataAlertsReblog = *o.DataAlertsReblog
		}
		fDataAlertsReblog := swag.FormatBool(frDataAlertsReblog)
		if fDataAlertsReblog != "" {
			if err := r.SetFormParam("data[alerts][reblog]", fDataAlertsReblog); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsStatus != nil {

		// form param data[alerts][status]
		var frDataAlertsStatus bool
		if o.DataAlertsStatus != nil {
			frDataAlertsStatus = *o.DataAlertsStatus
		}
		fDataAlertsStatus := swag.FormatBool(frDataAlertsStatus)
		if fDataAlertsStatus != "" {
			if err := r.SetFormParam("data[alerts][status]", fDataAlertsStatus); err != nil {
				return err
			}
		}
	}

	if o.DataAlertsUpdate != nil {

		// form param data[alerts][update]
		var frDataAlertsUpdate bool
		if o.DataAlertsUpdate != nil {
			frDataAlertsUpdate = *o.DataAlertsUpdate
		}
		fDataAlertsUpdate := swag.FormatBool(frDataAlertsUpdate)
		if fDataAlertsUpdate != "" {
			if err := r.SetFormParam("data[alerts][update]", fDataAlertsUpdate); err != nil {
				return err
			}
		}
	}

	if o.DataPolicy != nil {

		// form param data[policy]
		var frDataPolicy string
		if o.DataPolicy != nil {
			frDataPolicy = *o.DataPolicy
		}
		fDataPolicy := frDataPolicy
		if fDataPolicy != "" {
			if err := r.SetFormParam("data[policy]", fDataPolicy); err != nil {
				return err
			}
		}
	}

	// form param subscription[endpoint]
	frSubscriptionEndpoint := o.SubscriptionEndpoint
	fSubscriptionEndpoint := frSubscriptionEndpoint
	if fSubscriptionEndpoint != "" {
		if err := r.SetFormParam("subscription[endpoint]", fSubscriptionEndpoint); err != nil {
			return err
		}
	}

	// form param subscription[keys][auth]
	frSubscriptionKeysAuth := o.SubscriptionKeysAuth
	fSubscriptionKeysAuth := frSubscriptionKeysAuth
	if fSubscriptionKeysAuth != "" {
		if err := r.SetFormParam("subscription[keys][auth]", fSubscriptionKeysAuth); err != nil {
			return err
		}
	}

	// form param subscription[keys][p256dh]
	frSubscriptionKeysP256dh := o.SubscriptionKeysP256dh
	fSubscriptionKeysP256dh := frSubscriptionKeysP256dh
	if fSubscriptionKeysP256dh != "" {
		if err := r.SetFormParam("subscription[keys][p256dh]", fSubscriptionKeysP256dh); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
