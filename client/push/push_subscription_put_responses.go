// Code generated by go-swagger; DO NOT EDIT.

package push

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// PushSubscriptionPutReader is a Reader for the PushSubscriptionPut structure.
type PushSubscriptionPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PushSubscriptionPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPushSubscriptionPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPushSubscriptionPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPushSubscriptionPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPushSubscriptionPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPushSubscriptionPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewPushSubscriptionPutNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPushSubscriptionPutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v1/push/subscription] pushSubscriptionPut", response, response.Code())
	}
}

// NewPushSubscriptionPutOK creates a PushSubscriptionPutOK with default headers values
func NewPushSubscriptionPutOK() *PushSubscriptionPutOK {
	return &PushSubscriptionPutOK{}
}

/*
PushSubscriptionPutOK describes a response with status code 200, with default header values.

Web Push subscription for current access token.
*/
type PushSubscriptionPutOK struct {
	Payload *models.WebPushSubscription
}

// IsSuccess returns true when this push subscription put o k response has a 2xx status code
func (o *PushSubscriptionPutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this push subscription put o k response has a 3xx status code
func (o *PushSubscriptionPutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription put o k response has a 4xx status code
func (o *PushSubscriptionPutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this push subscription put o k response has a 5xx status code
func (o *PushSubscriptionPutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription put o k response a status code equal to that given
func (o *PushSubscriptionPutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the push subscription put o k response
func (o *PushSubscriptionPutOK) Code() int {
	return 200
}

func (o *PushSubscriptionPutOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutOK %s", 200, payload)
}

func (o *PushSubscriptionPutOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutOK %s", 200, payload)
}

func (o *PushSubscriptionPutOK) GetPayload() *models.WebPushSubscription {
	return o.Payload
}

func (o *PushSubscriptionPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebPushSubscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushSubscriptionPutBadRequest creates a PushSubscriptionPutBadRequest with default headers values
func NewPushSubscriptionPutBadRequest() *PushSubscriptionPutBadRequest {
	return &PushSubscriptionPutBadRequest{}
}

/*
PushSubscriptionPutBadRequest describes a response with status code 400, with default header values.

bad request
*/
type PushSubscriptionPutBadRequest struct {
}

// IsSuccess returns true when this push subscription put bad request response has a 2xx status code
func (o *PushSubscriptionPutBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription put bad request response has a 3xx status code
func (o *PushSubscriptionPutBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription put bad request response has a 4xx status code
func (o *PushSubscriptionPutBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription put bad request response has a 5xx status code
func (o *PushSubscriptionPutBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription put bad request response a status code equal to that given
func (o *PushSubscriptionPutBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the push subscription put bad request response
func (o *PushSubscriptionPutBadRequest) Code() int {
	return 400
}

func (o *PushSubscriptionPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutBadRequest", 400)
}

func (o *PushSubscriptionPutBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutBadRequest", 400)
}

func (o *PushSubscriptionPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPutUnauthorized creates a PushSubscriptionPutUnauthorized with default headers values
func NewPushSubscriptionPutUnauthorized() *PushSubscriptionPutUnauthorized {
	return &PushSubscriptionPutUnauthorized{}
}

/*
PushSubscriptionPutUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type PushSubscriptionPutUnauthorized struct {
}

// IsSuccess returns true when this push subscription put unauthorized response has a 2xx status code
func (o *PushSubscriptionPutUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription put unauthorized response has a 3xx status code
func (o *PushSubscriptionPutUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription put unauthorized response has a 4xx status code
func (o *PushSubscriptionPutUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription put unauthorized response has a 5xx status code
func (o *PushSubscriptionPutUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription put unauthorized response a status code equal to that given
func (o *PushSubscriptionPutUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the push subscription put unauthorized response
func (o *PushSubscriptionPutUnauthorized) Code() int {
	return 401
}

func (o *PushSubscriptionPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutUnauthorized", 401)
}

func (o *PushSubscriptionPutUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutUnauthorized", 401)
}

func (o *PushSubscriptionPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPutForbidden creates a PushSubscriptionPutForbidden with default headers values
func NewPushSubscriptionPutForbidden() *PushSubscriptionPutForbidden {
	return &PushSubscriptionPutForbidden{}
}

/*
PushSubscriptionPutForbidden describes a response with status code 403, with default header values.

forbidden
*/
type PushSubscriptionPutForbidden struct {
}

// IsSuccess returns true when this push subscription put forbidden response has a 2xx status code
func (o *PushSubscriptionPutForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription put forbidden response has a 3xx status code
func (o *PushSubscriptionPutForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription put forbidden response has a 4xx status code
func (o *PushSubscriptionPutForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription put forbidden response has a 5xx status code
func (o *PushSubscriptionPutForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription put forbidden response a status code equal to that given
func (o *PushSubscriptionPutForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the push subscription put forbidden response
func (o *PushSubscriptionPutForbidden) Code() int {
	return 403
}

func (o *PushSubscriptionPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutForbidden", 403)
}

func (o *PushSubscriptionPutForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutForbidden", 403)
}

func (o *PushSubscriptionPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPutNotFound creates a PushSubscriptionPutNotFound with default headers values
func NewPushSubscriptionPutNotFound() *PushSubscriptionPutNotFound {
	return &PushSubscriptionPutNotFound{}
}

/*
PushSubscriptionPutNotFound describes a response with status code 404, with default header values.

This access token doesn't have an associated subscription.
*/
type PushSubscriptionPutNotFound struct {
}

// IsSuccess returns true when this push subscription put not found response has a 2xx status code
func (o *PushSubscriptionPutNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription put not found response has a 3xx status code
func (o *PushSubscriptionPutNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription put not found response has a 4xx status code
func (o *PushSubscriptionPutNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription put not found response has a 5xx status code
func (o *PushSubscriptionPutNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription put not found response a status code equal to that given
func (o *PushSubscriptionPutNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the push subscription put not found response
func (o *PushSubscriptionPutNotFound) Code() int {
	return 404
}

func (o *PushSubscriptionPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutNotFound", 404)
}

func (o *PushSubscriptionPutNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutNotFound", 404)
}

func (o *PushSubscriptionPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPutNotAcceptable creates a PushSubscriptionPutNotAcceptable with default headers values
func NewPushSubscriptionPutNotAcceptable() *PushSubscriptionPutNotAcceptable {
	return &PushSubscriptionPutNotAcceptable{}
}

/*
PushSubscriptionPutNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type PushSubscriptionPutNotAcceptable struct {
}

// IsSuccess returns true when this push subscription put not acceptable response has a 2xx status code
func (o *PushSubscriptionPutNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription put not acceptable response has a 3xx status code
func (o *PushSubscriptionPutNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription put not acceptable response has a 4xx status code
func (o *PushSubscriptionPutNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this push subscription put not acceptable response has a 5xx status code
func (o *PushSubscriptionPutNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this push subscription put not acceptable response a status code equal to that given
func (o *PushSubscriptionPutNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the push subscription put not acceptable response
func (o *PushSubscriptionPutNotAcceptable) Code() int {
	return 406
}

func (o *PushSubscriptionPutNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutNotAcceptable", 406)
}

func (o *PushSubscriptionPutNotAcceptable) String() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutNotAcceptable", 406)
}

func (o *PushSubscriptionPutNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushSubscriptionPutInternalServerError creates a PushSubscriptionPutInternalServerError with default headers values
func NewPushSubscriptionPutInternalServerError() *PushSubscriptionPutInternalServerError {
	return &PushSubscriptionPutInternalServerError{}
}

/*
PushSubscriptionPutInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type PushSubscriptionPutInternalServerError struct {
}

// IsSuccess returns true when this push subscription put internal server error response has a 2xx status code
func (o *PushSubscriptionPutInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this push subscription put internal server error response has a 3xx status code
func (o *PushSubscriptionPutInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this push subscription put internal server error response has a 4xx status code
func (o *PushSubscriptionPutInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this push subscription put internal server error response has a 5xx status code
func (o *PushSubscriptionPutInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this push subscription put internal server error response a status code equal to that given
func (o *PushSubscriptionPutInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the push subscription put internal server error response
func (o *PushSubscriptionPutInternalServerError) Code() int {
	return 500
}

func (o *PushSubscriptionPutInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutInternalServerError", 500)
}

func (o *PushSubscriptionPutInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/push/subscription][%d] pushSubscriptionPutInternalServerError", 500)
}

func (o *PushSubscriptionPutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
