// Code generated by go-swagger; DO NOT EDIT.

package filters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// FilterStatusDeleteReader is a Reader for the FilterStatusDelete structure.
type FilterStatusDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FilterStatusDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFilterStatusDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFilterStatusDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFilterStatusDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFilterStatusDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewFilterStatusDeleteNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFilterStatusDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/v2/filters/statuses/{id}] filterStatusDelete", response, response.Code())
	}
}

// NewFilterStatusDeleteOK creates a FilterStatusDeleteOK with default headers values
func NewFilterStatusDeleteOK() *FilterStatusDeleteOK {
	return &FilterStatusDeleteOK{}
}

/*
FilterStatusDeleteOK describes a response with status code 200, with default header values.

filter status deleted
*/
type FilterStatusDeleteOK struct {
}

// IsSuccess returns true when this filter status delete o k response has a 2xx status code
func (o *FilterStatusDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this filter status delete o k response has a 3xx status code
func (o *FilterStatusDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter status delete o k response has a 4xx status code
func (o *FilterStatusDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this filter status delete o k response has a 5xx status code
func (o *FilterStatusDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this filter status delete o k response a status code equal to that given
func (o *FilterStatusDeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the filter status delete o k response
func (o *FilterStatusDeleteOK) Code() int {
	return 200
}

func (o *FilterStatusDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteOK", 200)
}

func (o *FilterStatusDeleteOK) String() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteOK", 200)
}

func (o *FilterStatusDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterStatusDeleteBadRequest creates a FilterStatusDeleteBadRequest with default headers values
func NewFilterStatusDeleteBadRequest() *FilterStatusDeleteBadRequest {
	return &FilterStatusDeleteBadRequest{}
}

/*
FilterStatusDeleteBadRequest describes a response with status code 400, with default header values.

bad request
*/
type FilterStatusDeleteBadRequest struct {
}

// IsSuccess returns true when this filter status delete bad request response has a 2xx status code
func (o *FilterStatusDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter status delete bad request response has a 3xx status code
func (o *FilterStatusDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter status delete bad request response has a 4xx status code
func (o *FilterStatusDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter status delete bad request response has a 5xx status code
func (o *FilterStatusDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this filter status delete bad request response a status code equal to that given
func (o *FilterStatusDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the filter status delete bad request response
func (o *FilterStatusDeleteBadRequest) Code() int {
	return 400
}

func (o *FilterStatusDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteBadRequest", 400)
}

func (o *FilterStatusDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteBadRequest", 400)
}

func (o *FilterStatusDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterStatusDeleteUnauthorized creates a FilterStatusDeleteUnauthorized with default headers values
func NewFilterStatusDeleteUnauthorized() *FilterStatusDeleteUnauthorized {
	return &FilterStatusDeleteUnauthorized{}
}

/*
FilterStatusDeleteUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FilterStatusDeleteUnauthorized struct {
}

// IsSuccess returns true when this filter status delete unauthorized response has a 2xx status code
func (o *FilterStatusDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter status delete unauthorized response has a 3xx status code
func (o *FilterStatusDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter status delete unauthorized response has a 4xx status code
func (o *FilterStatusDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter status delete unauthorized response has a 5xx status code
func (o *FilterStatusDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this filter status delete unauthorized response a status code equal to that given
func (o *FilterStatusDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the filter status delete unauthorized response
func (o *FilterStatusDeleteUnauthorized) Code() int {
	return 401
}

func (o *FilterStatusDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteUnauthorized", 401)
}

func (o *FilterStatusDeleteUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteUnauthorized", 401)
}

func (o *FilterStatusDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterStatusDeleteNotFound creates a FilterStatusDeleteNotFound with default headers values
func NewFilterStatusDeleteNotFound() *FilterStatusDeleteNotFound {
	return &FilterStatusDeleteNotFound{}
}

/*
FilterStatusDeleteNotFound describes a response with status code 404, with default header values.

not found
*/
type FilterStatusDeleteNotFound struct {
}

// IsSuccess returns true when this filter status delete not found response has a 2xx status code
func (o *FilterStatusDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter status delete not found response has a 3xx status code
func (o *FilterStatusDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter status delete not found response has a 4xx status code
func (o *FilterStatusDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter status delete not found response has a 5xx status code
func (o *FilterStatusDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this filter status delete not found response a status code equal to that given
func (o *FilterStatusDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the filter status delete not found response
func (o *FilterStatusDeleteNotFound) Code() int {
	return 404
}

func (o *FilterStatusDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteNotFound", 404)
}

func (o *FilterStatusDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteNotFound", 404)
}

func (o *FilterStatusDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterStatusDeleteNotAcceptable creates a FilterStatusDeleteNotAcceptable with default headers values
func NewFilterStatusDeleteNotAcceptable() *FilterStatusDeleteNotAcceptable {
	return &FilterStatusDeleteNotAcceptable{}
}

/*
FilterStatusDeleteNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type FilterStatusDeleteNotAcceptable struct {
}

// IsSuccess returns true when this filter status delete not acceptable response has a 2xx status code
func (o *FilterStatusDeleteNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter status delete not acceptable response has a 3xx status code
func (o *FilterStatusDeleteNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter status delete not acceptable response has a 4xx status code
func (o *FilterStatusDeleteNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter status delete not acceptable response has a 5xx status code
func (o *FilterStatusDeleteNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this filter status delete not acceptable response a status code equal to that given
func (o *FilterStatusDeleteNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the filter status delete not acceptable response
func (o *FilterStatusDeleteNotAcceptable) Code() int {
	return 406
}

func (o *FilterStatusDeleteNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteNotAcceptable", 406)
}

func (o *FilterStatusDeleteNotAcceptable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteNotAcceptable", 406)
}

func (o *FilterStatusDeleteNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterStatusDeleteInternalServerError creates a FilterStatusDeleteInternalServerError with default headers values
func NewFilterStatusDeleteInternalServerError() *FilterStatusDeleteInternalServerError {
	return &FilterStatusDeleteInternalServerError{}
}

/*
FilterStatusDeleteInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type FilterStatusDeleteInternalServerError struct {
}

// IsSuccess returns true when this filter status delete internal server error response has a 2xx status code
func (o *FilterStatusDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter status delete internal server error response has a 3xx status code
func (o *FilterStatusDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter status delete internal server error response has a 4xx status code
func (o *FilterStatusDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this filter status delete internal server error response has a 5xx status code
func (o *FilterStatusDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this filter status delete internal server error response a status code equal to that given
func (o *FilterStatusDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the filter status delete internal server error response
func (o *FilterStatusDeleteInternalServerError) Code() int {
	return 500
}

func (o *FilterStatusDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteInternalServerError", 500)
}

func (o *FilterStatusDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/filters/statuses/{id}][%d] filterStatusDeleteInternalServerError", 500)
}

func (o *FilterStatusDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
