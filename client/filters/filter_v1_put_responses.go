// Code generated by go-swagger; DO NOT EDIT.

package filters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// FilterV1PutReader is a Reader for the FilterV1Put structure.
type FilterV1PutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FilterV1PutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFilterV1PutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFilterV1PutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFilterV1PutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFilterV1PutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFilterV1PutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewFilterV1PutNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewFilterV1PutConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewFilterV1PutUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFilterV1PutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v1/filters/{id}] filterV1Put", response, response.Code())
	}
}

// NewFilterV1PutOK creates a FilterV1PutOK with default headers values
func NewFilterV1PutOK() *FilterV1PutOK {
	return &FilterV1PutOK{}
}

/*
FilterV1PutOK describes a response with status code 200, with default header values.

Updated filter.
*/
type FilterV1PutOK struct {
	Payload *models.FilterV1
}

// IsSuccess returns true when this filter v1 put o k response has a 2xx status code
func (o *FilterV1PutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this filter v1 put o k response has a 3xx status code
func (o *FilterV1PutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 put o k response has a 4xx status code
func (o *FilterV1PutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this filter v1 put o k response has a 5xx status code
func (o *FilterV1PutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 put o k response a status code equal to that given
func (o *FilterV1PutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the filter v1 put o k response
func (o *FilterV1PutOK) Code() int {
	return 200
}

func (o *FilterV1PutOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutOK %s", 200, payload)
}

func (o *FilterV1PutOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutOK %s", 200, payload)
}

func (o *FilterV1PutOK) GetPayload() *models.FilterV1 {
	return o.Payload
}

func (o *FilterV1PutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FilterV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFilterV1PutBadRequest creates a FilterV1PutBadRequest with default headers values
func NewFilterV1PutBadRequest() *FilterV1PutBadRequest {
	return &FilterV1PutBadRequest{}
}

/*
FilterV1PutBadRequest describes a response with status code 400, with default header values.

bad request
*/
type FilterV1PutBadRequest struct {
}

// IsSuccess returns true when this filter v1 put bad request response has a 2xx status code
func (o *FilterV1PutBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 put bad request response has a 3xx status code
func (o *FilterV1PutBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 put bad request response has a 4xx status code
func (o *FilterV1PutBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 put bad request response has a 5xx status code
func (o *FilterV1PutBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 put bad request response a status code equal to that given
func (o *FilterV1PutBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the filter v1 put bad request response
func (o *FilterV1PutBadRequest) Code() int {
	return 400
}

func (o *FilterV1PutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutBadRequest", 400)
}

func (o *FilterV1PutBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutBadRequest", 400)
}

func (o *FilterV1PutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1PutUnauthorized creates a FilterV1PutUnauthorized with default headers values
func NewFilterV1PutUnauthorized() *FilterV1PutUnauthorized {
	return &FilterV1PutUnauthorized{}
}

/*
FilterV1PutUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FilterV1PutUnauthorized struct {
}

// IsSuccess returns true when this filter v1 put unauthorized response has a 2xx status code
func (o *FilterV1PutUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 put unauthorized response has a 3xx status code
func (o *FilterV1PutUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 put unauthorized response has a 4xx status code
func (o *FilterV1PutUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 put unauthorized response has a 5xx status code
func (o *FilterV1PutUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 put unauthorized response a status code equal to that given
func (o *FilterV1PutUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the filter v1 put unauthorized response
func (o *FilterV1PutUnauthorized) Code() int {
	return 401
}

func (o *FilterV1PutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutUnauthorized", 401)
}

func (o *FilterV1PutUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutUnauthorized", 401)
}

func (o *FilterV1PutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1PutForbidden creates a FilterV1PutForbidden with default headers values
func NewFilterV1PutForbidden() *FilterV1PutForbidden {
	return &FilterV1PutForbidden{}
}

/*
FilterV1PutForbidden describes a response with status code 403, with default header values.

forbidden to moved accounts
*/
type FilterV1PutForbidden struct {
}

// IsSuccess returns true when this filter v1 put forbidden response has a 2xx status code
func (o *FilterV1PutForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 put forbidden response has a 3xx status code
func (o *FilterV1PutForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 put forbidden response has a 4xx status code
func (o *FilterV1PutForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 put forbidden response has a 5xx status code
func (o *FilterV1PutForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 put forbidden response a status code equal to that given
func (o *FilterV1PutForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the filter v1 put forbidden response
func (o *FilterV1PutForbidden) Code() int {
	return 403
}

func (o *FilterV1PutForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutForbidden", 403)
}

func (o *FilterV1PutForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutForbidden", 403)
}

func (o *FilterV1PutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1PutNotFound creates a FilterV1PutNotFound with default headers values
func NewFilterV1PutNotFound() *FilterV1PutNotFound {
	return &FilterV1PutNotFound{}
}

/*
FilterV1PutNotFound describes a response with status code 404, with default header values.

not found
*/
type FilterV1PutNotFound struct {
}

// IsSuccess returns true when this filter v1 put not found response has a 2xx status code
func (o *FilterV1PutNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 put not found response has a 3xx status code
func (o *FilterV1PutNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 put not found response has a 4xx status code
func (o *FilterV1PutNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 put not found response has a 5xx status code
func (o *FilterV1PutNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 put not found response a status code equal to that given
func (o *FilterV1PutNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the filter v1 put not found response
func (o *FilterV1PutNotFound) Code() int {
	return 404
}

func (o *FilterV1PutNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutNotFound", 404)
}

func (o *FilterV1PutNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutNotFound", 404)
}

func (o *FilterV1PutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1PutNotAcceptable creates a FilterV1PutNotAcceptable with default headers values
func NewFilterV1PutNotAcceptable() *FilterV1PutNotAcceptable {
	return &FilterV1PutNotAcceptable{}
}

/*
FilterV1PutNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type FilterV1PutNotAcceptable struct {
}

// IsSuccess returns true when this filter v1 put not acceptable response has a 2xx status code
func (o *FilterV1PutNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 put not acceptable response has a 3xx status code
func (o *FilterV1PutNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 put not acceptable response has a 4xx status code
func (o *FilterV1PutNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 put not acceptable response has a 5xx status code
func (o *FilterV1PutNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 put not acceptable response a status code equal to that given
func (o *FilterV1PutNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the filter v1 put not acceptable response
func (o *FilterV1PutNotAcceptable) Code() int {
	return 406
}

func (o *FilterV1PutNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutNotAcceptable", 406)
}

func (o *FilterV1PutNotAcceptable) String() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutNotAcceptable", 406)
}

func (o *FilterV1PutNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1PutConflict creates a FilterV1PutConflict with default headers values
func NewFilterV1PutConflict() *FilterV1PutConflict {
	return &FilterV1PutConflict{}
}

/*
FilterV1PutConflict describes a response with status code 409, with default header values.

conflict (duplicate keyword)
*/
type FilterV1PutConflict struct {
}

// IsSuccess returns true when this filter v1 put conflict response has a 2xx status code
func (o *FilterV1PutConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 put conflict response has a 3xx status code
func (o *FilterV1PutConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 put conflict response has a 4xx status code
func (o *FilterV1PutConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 put conflict response has a 5xx status code
func (o *FilterV1PutConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 put conflict response a status code equal to that given
func (o *FilterV1PutConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the filter v1 put conflict response
func (o *FilterV1PutConflict) Code() int {
	return 409
}

func (o *FilterV1PutConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutConflict", 409)
}

func (o *FilterV1PutConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutConflict", 409)
}

func (o *FilterV1PutConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1PutUnprocessableEntity creates a FilterV1PutUnprocessableEntity with default headers values
func NewFilterV1PutUnprocessableEntity() *FilterV1PutUnprocessableEntity {
	return &FilterV1PutUnprocessableEntity{}
}

/*
FilterV1PutUnprocessableEntity describes a response with status code 422, with default header values.

unprocessable content
*/
type FilterV1PutUnprocessableEntity struct {
}

// IsSuccess returns true when this filter v1 put unprocessable entity response has a 2xx status code
func (o *FilterV1PutUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 put unprocessable entity response has a 3xx status code
func (o *FilterV1PutUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 put unprocessable entity response has a 4xx status code
func (o *FilterV1PutUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 put unprocessable entity response has a 5xx status code
func (o *FilterV1PutUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 put unprocessable entity response a status code equal to that given
func (o *FilterV1PutUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the filter v1 put unprocessable entity response
func (o *FilterV1PutUnprocessableEntity) Code() int {
	return 422
}

func (o *FilterV1PutUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutUnprocessableEntity", 422)
}

func (o *FilterV1PutUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutUnprocessableEntity", 422)
}

func (o *FilterV1PutUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1PutInternalServerError creates a FilterV1PutInternalServerError with default headers values
func NewFilterV1PutInternalServerError() *FilterV1PutInternalServerError {
	return &FilterV1PutInternalServerError{}
}

/*
FilterV1PutInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type FilterV1PutInternalServerError struct {
}

// IsSuccess returns true when this filter v1 put internal server error response has a 2xx status code
func (o *FilterV1PutInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 put internal server error response has a 3xx status code
func (o *FilterV1PutInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 put internal server error response has a 4xx status code
func (o *FilterV1PutInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this filter v1 put internal server error response has a 5xx status code
func (o *FilterV1PutInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this filter v1 put internal server error response a status code equal to that given
func (o *FilterV1PutInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the filter v1 put internal server error response
func (o *FilterV1PutInternalServerError) Code() int {
	return 500
}

func (o *FilterV1PutInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutInternalServerError", 500)
}

func (o *FilterV1PutInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/filters/{id}][%d] filterV1PutInternalServerError", 500)
}

func (o *FilterV1PutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
