// Code generated by go-swagger; DO NOT EDIT.

package filters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// FilterV1DeleteReader is a Reader for the FilterV1Delete structure.
type FilterV1DeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FilterV1DeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFilterV1DeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFilterV1DeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFilterV1DeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFilterV1DeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewFilterV1DeleteNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFilterV1DeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/v1/filters/{id}] filterV1Delete", response, response.Code())
	}
}

// NewFilterV1DeleteOK creates a FilterV1DeleteOK with default headers values
func NewFilterV1DeleteOK() *FilterV1DeleteOK {
	return &FilterV1DeleteOK{}
}

/*
FilterV1DeleteOK describes a response with status code 200, with default header values.

filter deleted
*/
type FilterV1DeleteOK struct {
}

// IsSuccess returns true when this filter v1 delete o k response has a 2xx status code
func (o *FilterV1DeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this filter v1 delete o k response has a 3xx status code
func (o *FilterV1DeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 delete o k response has a 4xx status code
func (o *FilterV1DeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this filter v1 delete o k response has a 5xx status code
func (o *FilterV1DeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 delete o k response a status code equal to that given
func (o *FilterV1DeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the filter v1 delete o k response
func (o *FilterV1DeleteOK) Code() int {
	return 200
}

func (o *FilterV1DeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteOK", 200)
}

func (o *FilterV1DeleteOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteOK", 200)
}

func (o *FilterV1DeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1DeleteBadRequest creates a FilterV1DeleteBadRequest with default headers values
func NewFilterV1DeleteBadRequest() *FilterV1DeleteBadRequest {
	return &FilterV1DeleteBadRequest{}
}

/*
FilterV1DeleteBadRequest describes a response with status code 400, with default header values.

bad request
*/
type FilterV1DeleteBadRequest struct {
}

// IsSuccess returns true when this filter v1 delete bad request response has a 2xx status code
func (o *FilterV1DeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 delete bad request response has a 3xx status code
func (o *FilterV1DeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 delete bad request response has a 4xx status code
func (o *FilterV1DeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 delete bad request response has a 5xx status code
func (o *FilterV1DeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 delete bad request response a status code equal to that given
func (o *FilterV1DeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the filter v1 delete bad request response
func (o *FilterV1DeleteBadRequest) Code() int {
	return 400
}

func (o *FilterV1DeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteBadRequest", 400)
}

func (o *FilterV1DeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteBadRequest", 400)
}

func (o *FilterV1DeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1DeleteUnauthorized creates a FilterV1DeleteUnauthorized with default headers values
func NewFilterV1DeleteUnauthorized() *FilterV1DeleteUnauthorized {
	return &FilterV1DeleteUnauthorized{}
}

/*
FilterV1DeleteUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FilterV1DeleteUnauthorized struct {
}

// IsSuccess returns true when this filter v1 delete unauthorized response has a 2xx status code
func (o *FilterV1DeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 delete unauthorized response has a 3xx status code
func (o *FilterV1DeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 delete unauthorized response has a 4xx status code
func (o *FilterV1DeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 delete unauthorized response has a 5xx status code
func (o *FilterV1DeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 delete unauthorized response a status code equal to that given
func (o *FilterV1DeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the filter v1 delete unauthorized response
func (o *FilterV1DeleteUnauthorized) Code() int {
	return 401
}

func (o *FilterV1DeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteUnauthorized", 401)
}

func (o *FilterV1DeleteUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteUnauthorized", 401)
}

func (o *FilterV1DeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1DeleteNotFound creates a FilterV1DeleteNotFound with default headers values
func NewFilterV1DeleteNotFound() *FilterV1DeleteNotFound {
	return &FilterV1DeleteNotFound{}
}

/*
FilterV1DeleteNotFound describes a response with status code 404, with default header values.

not found
*/
type FilterV1DeleteNotFound struct {
}

// IsSuccess returns true when this filter v1 delete not found response has a 2xx status code
func (o *FilterV1DeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 delete not found response has a 3xx status code
func (o *FilterV1DeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 delete not found response has a 4xx status code
func (o *FilterV1DeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 delete not found response has a 5xx status code
func (o *FilterV1DeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 delete not found response a status code equal to that given
func (o *FilterV1DeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the filter v1 delete not found response
func (o *FilterV1DeleteNotFound) Code() int {
	return 404
}

func (o *FilterV1DeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteNotFound", 404)
}

func (o *FilterV1DeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteNotFound", 404)
}

func (o *FilterV1DeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1DeleteNotAcceptable creates a FilterV1DeleteNotAcceptable with default headers values
func NewFilterV1DeleteNotAcceptable() *FilterV1DeleteNotAcceptable {
	return &FilterV1DeleteNotAcceptable{}
}

/*
FilterV1DeleteNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type FilterV1DeleteNotAcceptable struct {
}

// IsSuccess returns true when this filter v1 delete not acceptable response has a 2xx status code
func (o *FilterV1DeleteNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 delete not acceptable response has a 3xx status code
func (o *FilterV1DeleteNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 delete not acceptable response has a 4xx status code
func (o *FilterV1DeleteNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter v1 delete not acceptable response has a 5xx status code
func (o *FilterV1DeleteNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this filter v1 delete not acceptable response a status code equal to that given
func (o *FilterV1DeleteNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the filter v1 delete not acceptable response
func (o *FilterV1DeleteNotAcceptable) Code() int {
	return 406
}

func (o *FilterV1DeleteNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteNotAcceptable", 406)
}

func (o *FilterV1DeleteNotAcceptable) String() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteNotAcceptable", 406)
}

func (o *FilterV1DeleteNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFilterV1DeleteInternalServerError creates a FilterV1DeleteInternalServerError with default headers values
func NewFilterV1DeleteInternalServerError() *FilterV1DeleteInternalServerError {
	return &FilterV1DeleteInternalServerError{}
}

/*
FilterV1DeleteInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type FilterV1DeleteInternalServerError struct {
}

// IsSuccess returns true when this filter v1 delete internal server error response has a 2xx status code
func (o *FilterV1DeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter v1 delete internal server error response has a 3xx status code
func (o *FilterV1DeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter v1 delete internal server error response has a 4xx status code
func (o *FilterV1DeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this filter v1 delete internal server error response has a 5xx status code
func (o *FilterV1DeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this filter v1 delete internal server error response a status code equal to that given
func (o *FilterV1DeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the filter v1 delete internal server error response
func (o *FilterV1DeleteInternalServerError) Code() int {
	return 500
}

func (o *FilterV1DeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteInternalServerError", 500)
}

func (o *FilterV1DeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v1/filters/{id}][%d] filterV1DeleteInternalServerError", 500)
}

func (o *FilterV1DeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
