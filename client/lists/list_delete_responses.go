// Code generated by go-swagger; DO NOT EDIT.

package lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ListDeleteReader is a Reader for the ListDelete structure.
type ListDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewListDeleteNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/v1/lists/{id}] listDelete", response, response.Code())
	}
}

// NewListDeleteOK creates a ListDeleteOK with default headers values
func NewListDeleteOK() *ListDeleteOK {
	return &ListDeleteOK{}
}

/*
ListDeleteOK describes a response with status code 200, with default header values.

list deleted
*/
type ListDeleteOK struct {
}

// IsSuccess returns true when this list delete o k response has a 2xx status code
func (o *ListDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list delete o k response has a 3xx status code
func (o *ListDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delete o k response has a 4xx status code
func (o *ListDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list delete o k response has a 5xx status code
func (o *ListDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list delete o k response a status code equal to that given
func (o *ListDeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list delete o k response
func (o *ListDeleteOK) Code() int {
	return 200
}

func (o *ListDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteOK", 200)
}

func (o *ListDeleteOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteOK", 200)
}

func (o *ListDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListDeleteBadRequest creates a ListDeleteBadRequest with default headers values
func NewListDeleteBadRequest() *ListDeleteBadRequest {
	return &ListDeleteBadRequest{}
}

/*
ListDeleteBadRequest describes a response with status code 400, with default header values.

bad request
*/
type ListDeleteBadRequest struct {
}

// IsSuccess returns true when this list delete bad request response has a 2xx status code
func (o *ListDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delete bad request response has a 3xx status code
func (o *ListDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delete bad request response has a 4xx status code
func (o *ListDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delete bad request response has a 5xx status code
func (o *ListDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list delete bad request response a status code equal to that given
func (o *ListDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list delete bad request response
func (o *ListDeleteBadRequest) Code() int {
	return 400
}

func (o *ListDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteBadRequest", 400)
}

func (o *ListDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteBadRequest", 400)
}

func (o *ListDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListDeleteUnauthorized creates a ListDeleteUnauthorized with default headers values
func NewListDeleteUnauthorized() *ListDeleteUnauthorized {
	return &ListDeleteUnauthorized{}
}

/*
ListDeleteUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type ListDeleteUnauthorized struct {
}

// IsSuccess returns true when this list delete unauthorized response has a 2xx status code
func (o *ListDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delete unauthorized response has a 3xx status code
func (o *ListDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delete unauthorized response has a 4xx status code
func (o *ListDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delete unauthorized response has a 5xx status code
func (o *ListDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list delete unauthorized response a status code equal to that given
func (o *ListDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list delete unauthorized response
func (o *ListDeleteUnauthorized) Code() int {
	return 401
}

func (o *ListDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteUnauthorized", 401)
}

func (o *ListDeleteUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteUnauthorized", 401)
}

func (o *ListDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListDeleteNotFound creates a ListDeleteNotFound with default headers values
func NewListDeleteNotFound() *ListDeleteNotFound {
	return &ListDeleteNotFound{}
}

/*
ListDeleteNotFound describes a response with status code 404, with default header values.

not found
*/
type ListDeleteNotFound struct {
}

// IsSuccess returns true when this list delete not found response has a 2xx status code
func (o *ListDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delete not found response has a 3xx status code
func (o *ListDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delete not found response has a 4xx status code
func (o *ListDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delete not found response has a 5xx status code
func (o *ListDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list delete not found response a status code equal to that given
func (o *ListDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list delete not found response
func (o *ListDeleteNotFound) Code() int {
	return 404
}

func (o *ListDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteNotFound", 404)
}

func (o *ListDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteNotFound", 404)
}

func (o *ListDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListDeleteNotAcceptable creates a ListDeleteNotAcceptable with default headers values
func NewListDeleteNotAcceptable() *ListDeleteNotAcceptable {
	return &ListDeleteNotAcceptable{}
}

/*
ListDeleteNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type ListDeleteNotAcceptable struct {
}

// IsSuccess returns true when this list delete not acceptable response has a 2xx status code
func (o *ListDeleteNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delete not acceptable response has a 3xx status code
func (o *ListDeleteNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delete not acceptable response has a 4xx status code
func (o *ListDeleteNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this list delete not acceptable response has a 5xx status code
func (o *ListDeleteNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this list delete not acceptable response a status code equal to that given
func (o *ListDeleteNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the list delete not acceptable response
func (o *ListDeleteNotAcceptable) Code() int {
	return 406
}

func (o *ListDeleteNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteNotAcceptable", 406)
}

func (o *ListDeleteNotAcceptable) String() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteNotAcceptable", 406)
}

func (o *ListDeleteNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListDeleteInternalServerError creates a ListDeleteInternalServerError with default headers values
func NewListDeleteInternalServerError() *ListDeleteInternalServerError {
	return &ListDeleteInternalServerError{}
}

/*
ListDeleteInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type ListDeleteInternalServerError struct {
}

// IsSuccess returns true when this list delete internal server error response has a 2xx status code
func (o *ListDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list delete internal server error response has a 3xx status code
func (o *ListDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list delete internal server error response has a 4xx status code
func (o *ListDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list delete internal server error response has a 5xx status code
func (o *ListDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list delete internal server error response a status code equal to that given
func (o *ListDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list delete internal server error response
func (o *ListDeleteInternalServerError) Code() int {
	return 500
}

func (o *ListDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteInternalServerError", 500)
}

func (o *ListDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v1/lists/{id}][%d] listDeleteInternalServerError", 500)
}

func (o *ListDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
