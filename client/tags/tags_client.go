// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new tags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new tags API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new tags API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for tags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FollowTag(params *FollowTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FollowTagOK, error)

	GetFeaturedTags(params *GetFeaturedTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFeaturedTagsOK, error)

	GetFollowedTags(params *GetFollowedTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFollowedTagsOK, error)

	GetTag(params *GetTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagOK, error)

	UnfollowTag(params *UnfollowTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnfollowTagOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
FollowTag follows a hashtag

Idempotent: if you are already following the tag, this call will still succeed.
*/
func (a *Client) FollowTag(params *FollowTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FollowTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFollowTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "followTag",
		Method:             "POST",
		PathPattern:        "/api/v1/tags/{tag_name}/follow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FollowTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FollowTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for followTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFeaturedTags gets an array of all hashtags that you currently have featured on your profile

THIS ENDPOINT IS CURRENTLY NOT FULLY IMPLEMENTED: it will always return an empty array.
*/
func (a *Client) GetFeaturedTags(params *GetFeaturedTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFeaturedTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeaturedTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFeaturedTags",
		Method:             "GET",
		PathPattern:        "/api/v1/featured_tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFeaturedTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeaturedTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeaturedTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFollowedTags gets an array of all hashtags that you currently follow
*/
func (a *Client) GetFollowedTags(params *GetFollowedTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFollowedTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFollowedTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFollowedTags",
		Method:             "GET",
		PathPattern:        "/api/v1/followed_tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFollowedTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFollowedTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFollowedTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTag gets details for a hashtag including whether you currently follow it

If the tag does not exist, this method will not create it in the database.
*/
func (a *Client) GetTag(params *GetTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTag",
		Method:             "GET",
		PathPattern:        "/api/v1/tags/{tag_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnfollowTag unfollows a hashtag

Idempotent: if you are not following the tag, this call will still succeed.
*/
func (a *Client) UnfollowTag(params *UnfollowTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnfollowTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnfollowTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unfollowTag",
		Method:             "POST",
		PathPattern:        "/api/v1/tags/{tag_name}/unfollow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnfollowTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnfollowTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unfollowTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
