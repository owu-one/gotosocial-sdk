// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUnfollowTagParams creates a new UnfollowTagParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUnfollowTagParams() *UnfollowTagParams {
	return &UnfollowTagParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUnfollowTagParamsWithTimeout creates a new UnfollowTagParams object
// with the ability to set a timeout on a request.
func NewUnfollowTagParamsWithTimeout(timeout time.Duration) *UnfollowTagParams {
	return &UnfollowTagParams{
		timeout: timeout,
	}
}

// NewUnfollowTagParamsWithContext creates a new UnfollowTagParams object
// with the ability to set a context for a request.
func NewUnfollowTagParamsWithContext(ctx context.Context) *UnfollowTagParams {
	return &UnfollowTagParams{
		Context: ctx,
	}
}

// NewUnfollowTagParamsWithHTTPClient creates a new UnfollowTagParams object
// with the ability to set a custom HTTPClient for a request.
func NewUnfollowTagParamsWithHTTPClient(client *http.Client) *UnfollowTagParams {
	return &UnfollowTagParams{
		HTTPClient: client,
	}
}

/*
UnfollowTagParams contains all the parameters to send to the API endpoint

	for the unfollow tag operation.

	Typically these are written to a http.Request.
*/
type UnfollowTagParams struct {

	/* TagName.

	   Name of the tag (no leading `#`)
	*/
	TagName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the unfollow tag params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UnfollowTagParams) WithDefaults() *UnfollowTagParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the unfollow tag params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UnfollowTagParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the unfollow tag params
func (o *UnfollowTagParams) WithTimeout(timeout time.Duration) *UnfollowTagParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the unfollow tag params
func (o *UnfollowTagParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the unfollow tag params
func (o *UnfollowTagParams) WithContext(ctx context.Context) *UnfollowTagParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the unfollow tag params
func (o *UnfollowTagParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the unfollow tag params
func (o *UnfollowTagParams) WithHTTPClient(client *http.Client) *UnfollowTagParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the unfollow tag params
func (o *UnfollowTagParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTagName adds the tagName to the unfollow tag params
func (o *UnfollowTagParams) WithTagName(tagName string) *UnfollowTagParams {
	o.SetTagName(tagName)
	return o
}

// SetTagName adds the tagName to the unfollow tag params
func (o *UnfollowTagParams) SetTagName(tagName string) {
	o.TagName = tagName
}

// WriteToRequest writes these params to a swagger request
func (o *UnfollowTagParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param tag_name
	if err := r.SetPathParam("tag_name", o.TagName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
