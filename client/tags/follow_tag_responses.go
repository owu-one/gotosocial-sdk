// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// FollowTagReader is a Reader for the FollowTag structure.
type FollowTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FollowTagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFollowTagOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFollowTagBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFollowTagUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFollowTagForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFollowTagInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/v1/tags/{tag_name}/follow] followTag", response, response.Code())
	}
}

// NewFollowTagOK creates a FollowTagOK with default headers values
func NewFollowTagOK() *FollowTagOK {
	return &FollowTagOK{}
}

/*
FollowTagOK describes a response with status code 200, with default header values.

Info about the tag.
*/
type FollowTagOK struct {
	Payload *models.Tag
}

// IsSuccess returns true when this follow tag o k response has a 2xx status code
func (o *FollowTagOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this follow tag o k response has a 3xx status code
func (o *FollowTagOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this follow tag o k response has a 4xx status code
func (o *FollowTagOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this follow tag o k response has a 5xx status code
func (o *FollowTagOK) IsServerError() bool {
	return false
}

// IsCode returns true when this follow tag o k response a status code equal to that given
func (o *FollowTagOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the follow tag o k response
func (o *FollowTagOK) Code() int {
	return 200
}

func (o *FollowTagOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagOK %s", 200, payload)
}

func (o *FollowTagOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagOK %s", 200, payload)
}

func (o *FollowTagOK) GetPayload() *models.Tag {
	return o.Payload
}

func (o *FollowTagOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Tag)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFollowTagBadRequest creates a FollowTagBadRequest with default headers values
func NewFollowTagBadRequest() *FollowTagBadRequest {
	return &FollowTagBadRequest{}
}

/*
FollowTagBadRequest describes a response with status code 400, with default header values.

bad request
*/
type FollowTagBadRequest struct {
}

// IsSuccess returns true when this follow tag bad request response has a 2xx status code
func (o *FollowTagBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this follow tag bad request response has a 3xx status code
func (o *FollowTagBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this follow tag bad request response has a 4xx status code
func (o *FollowTagBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this follow tag bad request response has a 5xx status code
func (o *FollowTagBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this follow tag bad request response a status code equal to that given
func (o *FollowTagBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the follow tag bad request response
func (o *FollowTagBadRequest) Code() int {
	return 400
}

func (o *FollowTagBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagBadRequest", 400)
}

func (o *FollowTagBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagBadRequest", 400)
}

func (o *FollowTagBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFollowTagUnauthorized creates a FollowTagUnauthorized with default headers values
func NewFollowTagUnauthorized() *FollowTagUnauthorized {
	return &FollowTagUnauthorized{}
}

/*
FollowTagUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FollowTagUnauthorized struct {
}

// IsSuccess returns true when this follow tag unauthorized response has a 2xx status code
func (o *FollowTagUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this follow tag unauthorized response has a 3xx status code
func (o *FollowTagUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this follow tag unauthorized response has a 4xx status code
func (o *FollowTagUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this follow tag unauthorized response has a 5xx status code
func (o *FollowTagUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this follow tag unauthorized response a status code equal to that given
func (o *FollowTagUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the follow tag unauthorized response
func (o *FollowTagUnauthorized) Code() int {
	return 401
}

func (o *FollowTagUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagUnauthorized", 401)
}

func (o *FollowTagUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagUnauthorized", 401)
}

func (o *FollowTagUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFollowTagForbidden creates a FollowTagForbidden with default headers values
func NewFollowTagForbidden() *FollowTagForbidden {
	return &FollowTagForbidden{}
}

/*
FollowTagForbidden describes a response with status code 403, with default header values.

forbidden
*/
type FollowTagForbidden struct {
}

// IsSuccess returns true when this follow tag forbidden response has a 2xx status code
func (o *FollowTagForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this follow tag forbidden response has a 3xx status code
func (o *FollowTagForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this follow tag forbidden response has a 4xx status code
func (o *FollowTagForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this follow tag forbidden response has a 5xx status code
func (o *FollowTagForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this follow tag forbidden response a status code equal to that given
func (o *FollowTagForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the follow tag forbidden response
func (o *FollowTagForbidden) Code() int {
	return 403
}

func (o *FollowTagForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagForbidden", 403)
}

func (o *FollowTagForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagForbidden", 403)
}

func (o *FollowTagForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFollowTagInternalServerError creates a FollowTagInternalServerError with default headers values
func NewFollowTagInternalServerError() *FollowTagInternalServerError {
	return &FollowTagInternalServerError{}
}

/*
FollowTagInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type FollowTagInternalServerError struct {
}

// IsSuccess returns true when this follow tag internal server error response has a 2xx status code
func (o *FollowTagInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this follow tag internal server error response has a 3xx status code
func (o *FollowTagInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this follow tag internal server error response has a 4xx status code
func (o *FollowTagInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this follow tag internal server error response has a 5xx status code
func (o *FollowTagInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this follow tag internal server error response a status code equal to that given
func (o *FollowTagInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the follow tag internal server error response
func (o *FollowTagInternalServerError) Code() int {
	return 500
}

func (o *FollowTagInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagInternalServerError", 500)
}

func (o *FollowTagInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/tags/{tag_name}/follow][%d] followTagInternalServerError", 500)
}

func (o *FollowTagInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
