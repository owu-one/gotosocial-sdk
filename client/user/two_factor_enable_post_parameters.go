// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewTwoFactorEnablePostParams creates a new TwoFactorEnablePostParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTwoFactorEnablePostParams() *TwoFactorEnablePostParams {
	return &TwoFactorEnablePostParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTwoFactorEnablePostParamsWithTimeout creates a new TwoFactorEnablePostParams object
// with the ability to set a timeout on a request.
func NewTwoFactorEnablePostParamsWithTimeout(timeout time.Duration) *TwoFactorEnablePostParams {
	return &TwoFactorEnablePostParams{
		timeout: timeout,
	}
}

// NewTwoFactorEnablePostParamsWithContext creates a new TwoFactorEnablePostParams object
// with the ability to set a context for a request.
func NewTwoFactorEnablePostParamsWithContext(ctx context.Context) *TwoFactorEnablePostParams {
	return &TwoFactorEnablePostParams{
		Context: ctx,
	}
}

// NewTwoFactorEnablePostParamsWithHTTPClient creates a new TwoFactorEnablePostParams object
// with the ability to set a custom HTTPClient for a request.
func NewTwoFactorEnablePostParamsWithHTTPClient(client *http.Client) *TwoFactorEnablePostParams {
	return &TwoFactorEnablePostParams{
		HTTPClient: client,
	}
}

/*
TwoFactorEnablePostParams contains all the parameters to send to the API endpoint

	for the two factor enable post operation.

	Typically these are written to a http.Request.
*/
type TwoFactorEnablePostParams struct {

	/* Code.

	     2fa code from the user's authenticator app.
	Sample: 123456
	*/
	Code *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the two factor enable post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TwoFactorEnablePostParams) WithDefaults() *TwoFactorEnablePostParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the two factor enable post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TwoFactorEnablePostParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the two factor enable post params
func (o *TwoFactorEnablePostParams) WithTimeout(timeout time.Duration) *TwoFactorEnablePostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the two factor enable post params
func (o *TwoFactorEnablePostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the two factor enable post params
func (o *TwoFactorEnablePostParams) WithContext(ctx context.Context) *TwoFactorEnablePostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the two factor enable post params
func (o *TwoFactorEnablePostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the two factor enable post params
func (o *TwoFactorEnablePostParams) WithHTTPClient(client *http.Client) *TwoFactorEnablePostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the two factor enable post params
func (o *TwoFactorEnablePostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the two factor enable post params
func (o *TwoFactorEnablePostParams) WithCode(code *string) *TwoFactorEnablePostParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the two factor enable post params
func (o *TwoFactorEnablePostParams) SetCode(code *string) {
	o.Code = code
}

// WriteToRequest writes these params to a swagger request
func (o *TwoFactorEnablePostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Code != nil {

		// form param code
		var frCode string
		if o.Code != nil {
			frCode = *o.Code
		}
		fCode := frCode
		if fCode != "" {
			if err := r.SetFormParam("code", fCode); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
