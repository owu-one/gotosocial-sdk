// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// TwoFactorEnablePostReader is a Reader for the TwoFactorEnablePost structure.
type TwoFactorEnablePostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TwoFactorEnablePostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTwoFactorEnablePostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewTwoFactorEnablePostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTwoFactorEnablePostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewTwoFactorEnablePostNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewTwoFactorEnablePostConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewTwoFactorEnablePostUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTwoFactorEnablePostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/v1/user/2fa/enable] TwoFactorEnablePost", response, response.Code())
	}
}

// NewTwoFactorEnablePostOK creates a TwoFactorEnablePostOK with default headers values
func NewTwoFactorEnablePostOK() *TwoFactorEnablePostOK {
	return &TwoFactorEnablePostOK{}
}

/*
TwoFactorEnablePostOK describes a response with status code 200, with default header values.

QR code
*/
type TwoFactorEnablePostOK struct {
}

// IsSuccess returns true when this two factor enable post o k response has a 2xx status code
func (o *TwoFactorEnablePostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this two factor enable post o k response has a 3xx status code
func (o *TwoFactorEnablePostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this two factor enable post o k response has a 4xx status code
func (o *TwoFactorEnablePostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this two factor enable post o k response has a 5xx status code
func (o *TwoFactorEnablePostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this two factor enable post o k response a status code equal to that given
func (o *TwoFactorEnablePostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the two factor enable post o k response
func (o *TwoFactorEnablePostOK) Code() int {
	return 200
}

func (o *TwoFactorEnablePostOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostOK", 200)
}

func (o *TwoFactorEnablePostOK) String() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostOK", 200)
}

func (o *TwoFactorEnablePostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTwoFactorEnablePostUnauthorized creates a TwoFactorEnablePostUnauthorized with default headers values
func NewTwoFactorEnablePostUnauthorized() *TwoFactorEnablePostUnauthorized {
	return &TwoFactorEnablePostUnauthorized{}
}

/*
TwoFactorEnablePostUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type TwoFactorEnablePostUnauthorized struct {
}

// IsSuccess returns true when this two factor enable post unauthorized response has a 2xx status code
func (o *TwoFactorEnablePostUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this two factor enable post unauthorized response has a 3xx status code
func (o *TwoFactorEnablePostUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this two factor enable post unauthorized response has a 4xx status code
func (o *TwoFactorEnablePostUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this two factor enable post unauthorized response has a 5xx status code
func (o *TwoFactorEnablePostUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this two factor enable post unauthorized response a status code equal to that given
func (o *TwoFactorEnablePostUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the two factor enable post unauthorized response
func (o *TwoFactorEnablePostUnauthorized) Code() int {
	return 401
}

func (o *TwoFactorEnablePostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostUnauthorized", 401)
}

func (o *TwoFactorEnablePostUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostUnauthorized", 401)
}

func (o *TwoFactorEnablePostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTwoFactorEnablePostForbidden creates a TwoFactorEnablePostForbidden with default headers values
func NewTwoFactorEnablePostForbidden() *TwoFactorEnablePostForbidden {
	return &TwoFactorEnablePostForbidden{}
}

/*
TwoFactorEnablePostForbidden describes a response with status code 403, with default header values.

forbidden
*/
type TwoFactorEnablePostForbidden struct {
}

// IsSuccess returns true when this two factor enable post forbidden response has a 2xx status code
func (o *TwoFactorEnablePostForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this two factor enable post forbidden response has a 3xx status code
func (o *TwoFactorEnablePostForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this two factor enable post forbidden response has a 4xx status code
func (o *TwoFactorEnablePostForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this two factor enable post forbidden response has a 5xx status code
func (o *TwoFactorEnablePostForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this two factor enable post forbidden response a status code equal to that given
func (o *TwoFactorEnablePostForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the two factor enable post forbidden response
func (o *TwoFactorEnablePostForbidden) Code() int {
	return 403
}

func (o *TwoFactorEnablePostForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostForbidden", 403)
}

func (o *TwoFactorEnablePostForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostForbidden", 403)
}

func (o *TwoFactorEnablePostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTwoFactorEnablePostNotAcceptable creates a TwoFactorEnablePostNotAcceptable with default headers values
func NewTwoFactorEnablePostNotAcceptable() *TwoFactorEnablePostNotAcceptable {
	return &TwoFactorEnablePostNotAcceptable{}
}

/*
TwoFactorEnablePostNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type TwoFactorEnablePostNotAcceptable struct {
}

// IsSuccess returns true when this two factor enable post not acceptable response has a 2xx status code
func (o *TwoFactorEnablePostNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this two factor enable post not acceptable response has a 3xx status code
func (o *TwoFactorEnablePostNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this two factor enable post not acceptable response has a 4xx status code
func (o *TwoFactorEnablePostNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this two factor enable post not acceptable response has a 5xx status code
func (o *TwoFactorEnablePostNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this two factor enable post not acceptable response a status code equal to that given
func (o *TwoFactorEnablePostNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the two factor enable post not acceptable response
func (o *TwoFactorEnablePostNotAcceptable) Code() int {
	return 406
}

func (o *TwoFactorEnablePostNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostNotAcceptable", 406)
}

func (o *TwoFactorEnablePostNotAcceptable) String() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostNotAcceptable", 406)
}

func (o *TwoFactorEnablePostNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTwoFactorEnablePostConflict creates a TwoFactorEnablePostConflict with default headers values
func NewTwoFactorEnablePostConflict() *TwoFactorEnablePostConflict {
	return &TwoFactorEnablePostConflict{}
}

/*
TwoFactorEnablePostConflict describes a response with status code 409, with default header values.

conflict
*/
type TwoFactorEnablePostConflict struct {
}

// IsSuccess returns true when this two factor enable post conflict response has a 2xx status code
func (o *TwoFactorEnablePostConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this two factor enable post conflict response has a 3xx status code
func (o *TwoFactorEnablePostConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this two factor enable post conflict response has a 4xx status code
func (o *TwoFactorEnablePostConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this two factor enable post conflict response has a 5xx status code
func (o *TwoFactorEnablePostConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this two factor enable post conflict response a status code equal to that given
func (o *TwoFactorEnablePostConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the two factor enable post conflict response
func (o *TwoFactorEnablePostConflict) Code() int {
	return 409
}

func (o *TwoFactorEnablePostConflict) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostConflict", 409)
}

func (o *TwoFactorEnablePostConflict) String() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostConflict", 409)
}

func (o *TwoFactorEnablePostConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTwoFactorEnablePostUnprocessableEntity creates a TwoFactorEnablePostUnprocessableEntity with default headers values
func NewTwoFactorEnablePostUnprocessableEntity() *TwoFactorEnablePostUnprocessableEntity {
	return &TwoFactorEnablePostUnprocessableEntity{}
}

/*
TwoFactorEnablePostUnprocessableEntity describes a response with status code 422, with default header values.

unprocessable entity
*/
type TwoFactorEnablePostUnprocessableEntity struct {
}

// IsSuccess returns true when this two factor enable post unprocessable entity response has a 2xx status code
func (o *TwoFactorEnablePostUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this two factor enable post unprocessable entity response has a 3xx status code
func (o *TwoFactorEnablePostUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this two factor enable post unprocessable entity response has a 4xx status code
func (o *TwoFactorEnablePostUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this two factor enable post unprocessable entity response has a 5xx status code
func (o *TwoFactorEnablePostUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this two factor enable post unprocessable entity response a status code equal to that given
func (o *TwoFactorEnablePostUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the two factor enable post unprocessable entity response
func (o *TwoFactorEnablePostUnprocessableEntity) Code() int {
	return 422
}

func (o *TwoFactorEnablePostUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostUnprocessableEntity", 422)
}

func (o *TwoFactorEnablePostUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostUnprocessableEntity", 422)
}

func (o *TwoFactorEnablePostUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTwoFactorEnablePostInternalServerError creates a TwoFactorEnablePostInternalServerError with default headers values
func NewTwoFactorEnablePostInternalServerError() *TwoFactorEnablePostInternalServerError {
	return &TwoFactorEnablePostInternalServerError{}
}

/*
TwoFactorEnablePostInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type TwoFactorEnablePostInternalServerError struct {
}

// IsSuccess returns true when this two factor enable post internal server error response has a 2xx status code
func (o *TwoFactorEnablePostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this two factor enable post internal server error response has a 3xx status code
func (o *TwoFactorEnablePostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this two factor enable post internal server error response has a 4xx status code
func (o *TwoFactorEnablePostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this two factor enable post internal server error response has a 5xx status code
func (o *TwoFactorEnablePostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this two factor enable post internal server error response a status code equal to that given
func (o *TwoFactorEnablePostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the two factor enable post internal server error response
func (o *TwoFactorEnablePostInternalServerError) Code() int {
	return 500
}

func (o *TwoFactorEnablePostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostInternalServerError", 500)
}

func (o *TwoFactorEnablePostInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/user/2fa/enable][%d] twoFactorEnablePostInternalServerError", 500)
}

func (o *TwoFactorEnablePostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
