// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UserPasswordChangeReader is a Reader for the UserPasswordChange structure.
type UserPasswordChangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserPasswordChangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserPasswordChangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserPasswordChangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserPasswordChangeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUserPasswordChangeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewUserPasswordChangeNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUserPasswordChangeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserPasswordChangeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/v1/user/password_change] userPasswordChange", response, response.Code())
	}
}

// NewUserPasswordChangeOK creates a UserPasswordChangeOK with default headers values
func NewUserPasswordChangeOK() *UserPasswordChangeOK {
	return &UserPasswordChangeOK{}
}

/*
UserPasswordChangeOK describes a response with status code 200, with default header values.

Change successful
*/
type UserPasswordChangeOK struct {
}

// IsSuccess returns true when this user password change o k response has a 2xx status code
func (o *UserPasswordChangeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user password change o k response has a 3xx status code
func (o *UserPasswordChangeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user password change o k response has a 4xx status code
func (o *UserPasswordChangeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user password change o k response has a 5xx status code
func (o *UserPasswordChangeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user password change o k response a status code equal to that given
func (o *UserPasswordChangeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the user password change o k response
func (o *UserPasswordChangeOK) Code() int {
	return 200
}

func (o *UserPasswordChangeOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeOK", 200)
}

func (o *UserPasswordChangeOK) String() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeOK", 200)
}

func (o *UserPasswordChangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserPasswordChangeBadRequest creates a UserPasswordChangeBadRequest with default headers values
func NewUserPasswordChangeBadRequest() *UserPasswordChangeBadRequest {
	return &UserPasswordChangeBadRequest{}
}

/*
UserPasswordChangeBadRequest describes a response with status code 400, with default header values.

bad request
*/
type UserPasswordChangeBadRequest struct {
}

// IsSuccess returns true when this user password change bad request response has a 2xx status code
func (o *UserPasswordChangeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user password change bad request response has a 3xx status code
func (o *UserPasswordChangeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user password change bad request response has a 4xx status code
func (o *UserPasswordChangeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user password change bad request response has a 5xx status code
func (o *UserPasswordChangeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user password change bad request response a status code equal to that given
func (o *UserPasswordChangeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the user password change bad request response
func (o *UserPasswordChangeBadRequest) Code() int {
	return 400
}

func (o *UserPasswordChangeBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeBadRequest", 400)
}

func (o *UserPasswordChangeBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeBadRequest", 400)
}

func (o *UserPasswordChangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserPasswordChangeUnauthorized creates a UserPasswordChangeUnauthorized with default headers values
func NewUserPasswordChangeUnauthorized() *UserPasswordChangeUnauthorized {
	return &UserPasswordChangeUnauthorized{}
}

/*
UserPasswordChangeUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type UserPasswordChangeUnauthorized struct {
}

// IsSuccess returns true when this user password change unauthorized response has a 2xx status code
func (o *UserPasswordChangeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user password change unauthorized response has a 3xx status code
func (o *UserPasswordChangeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user password change unauthorized response has a 4xx status code
func (o *UserPasswordChangeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user password change unauthorized response has a 5xx status code
func (o *UserPasswordChangeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user password change unauthorized response a status code equal to that given
func (o *UserPasswordChangeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the user password change unauthorized response
func (o *UserPasswordChangeUnauthorized) Code() int {
	return 401
}

func (o *UserPasswordChangeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeUnauthorized", 401)
}

func (o *UserPasswordChangeUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeUnauthorized", 401)
}

func (o *UserPasswordChangeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserPasswordChangeForbidden creates a UserPasswordChangeForbidden with default headers values
func NewUserPasswordChangeForbidden() *UserPasswordChangeForbidden {
	return &UserPasswordChangeForbidden{}
}

/*
UserPasswordChangeForbidden describes a response with status code 403, with default header values.

forbidden
*/
type UserPasswordChangeForbidden struct {
}

// IsSuccess returns true when this user password change forbidden response has a 2xx status code
func (o *UserPasswordChangeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user password change forbidden response has a 3xx status code
func (o *UserPasswordChangeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user password change forbidden response has a 4xx status code
func (o *UserPasswordChangeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user password change forbidden response has a 5xx status code
func (o *UserPasswordChangeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user password change forbidden response a status code equal to that given
func (o *UserPasswordChangeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the user password change forbidden response
func (o *UserPasswordChangeForbidden) Code() int {
	return 403
}

func (o *UserPasswordChangeForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeForbidden", 403)
}

func (o *UserPasswordChangeForbidden) String() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeForbidden", 403)
}

func (o *UserPasswordChangeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserPasswordChangeNotAcceptable creates a UserPasswordChangeNotAcceptable with default headers values
func NewUserPasswordChangeNotAcceptable() *UserPasswordChangeNotAcceptable {
	return &UserPasswordChangeNotAcceptable{}
}

/*
UserPasswordChangeNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type UserPasswordChangeNotAcceptable struct {
}

// IsSuccess returns true when this user password change not acceptable response has a 2xx status code
func (o *UserPasswordChangeNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user password change not acceptable response has a 3xx status code
func (o *UserPasswordChangeNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user password change not acceptable response has a 4xx status code
func (o *UserPasswordChangeNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this user password change not acceptable response has a 5xx status code
func (o *UserPasswordChangeNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this user password change not acceptable response a status code equal to that given
func (o *UserPasswordChangeNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the user password change not acceptable response
func (o *UserPasswordChangeNotAcceptable) Code() int {
	return 406
}

func (o *UserPasswordChangeNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeNotAcceptable", 406)
}

func (o *UserPasswordChangeNotAcceptable) String() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeNotAcceptable", 406)
}

func (o *UserPasswordChangeNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserPasswordChangeUnprocessableEntity creates a UserPasswordChangeUnprocessableEntity with default headers values
func NewUserPasswordChangeUnprocessableEntity() *UserPasswordChangeUnprocessableEntity {
	return &UserPasswordChangeUnprocessableEntity{}
}

/*
UserPasswordChangeUnprocessableEntity describes a response with status code 422, with default header values.

unprocessable request because instance is running with OIDC backend
*/
type UserPasswordChangeUnprocessableEntity struct {
}

// IsSuccess returns true when this user password change unprocessable entity response has a 2xx status code
func (o *UserPasswordChangeUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user password change unprocessable entity response has a 3xx status code
func (o *UserPasswordChangeUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user password change unprocessable entity response has a 4xx status code
func (o *UserPasswordChangeUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this user password change unprocessable entity response has a 5xx status code
func (o *UserPasswordChangeUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this user password change unprocessable entity response a status code equal to that given
func (o *UserPasswordChangeUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the user password change unprocessable entity response
func (o *UserPasswordChangeUnprocessableEntity) Code() int {
	return 422
}

func (o *UserPasswordChangeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeUnprocessableEntity", 422)
}

func (o *UserPasswordChangeUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeUnprocessableEntity", 422)
}

func (o *UserPasswordChangeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserPasswordChangeInternalServerError creates a UserPasswordChangeInternalServerError with default headers values
func NewUserPasswordChangeInternalServerError() *UserPasswordChangeInternalServerError {
	return &UserPasswordChangeInternalServerError{}
}

/*
UserPasswordChangeInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type UserPasswordChangeInternalServerError struct {
}

// IsSuccess returns true when this user password change internal server error response has a 2xx status code
func (o *UserPasswordChangeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user password change internal server error response has a 3xx status code
func (o *UserPasswordChangeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user password change internal server error response has a 4xx status code
func (o *UserPasswordChangeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user password change internal server error response has a 5xx status code
func (o *UserPasswordChangeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user password change internal server error response a status code equal to that given
func (o *UserPasswordChangeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the user password change internal server error response
func (o *UserPasswordChangeInternalServerError) Code() int {
	return 500
}

func (o *UserPasswordChangeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeInternalServerError", 500)
}

func (o *UserPasswordChangeInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/user/password_change][%d] userPasswordChangeInternalServerError", 500)
}

func (o *UserPasswordChangeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
