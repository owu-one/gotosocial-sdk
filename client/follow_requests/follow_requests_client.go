// Code generated by go-swagger; DO NOT EDIT.

package follow_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new follow requests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new follow requests API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new follow requests API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for follow requests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AuthorizeFollowRequest(params *AuthorizeFollowRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthorizeFollowRequestOK, error)

	GetFollowRequests(params *GetFollowRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFollowRequestsOK, error)

	RejectFollowRequest(params *RejectFollowRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectFollowRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AuthorizeFollowRequest accepts authorize follow request from the given account ID

Accept a follow request and put the requesting account in your 'followers' list.
*/
func (a *Client) AuthorizeFollowRequest(params *AuthorizeFollowRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthorizeFollowRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizeFollowRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authorizeFollowRequest",
		Method:             "POST",
		PathPattern:        "/api/v1/follow_requests/{account_id}/authorize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthorizeFollowRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizeFollowRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorizeFollowRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetFollowRequests gets an array of accounts that have requested to follow you

	The next and previous queries can be parsed from the returned Link header.

Example:

```
<https://example.org/api/v1/follow_requests?limit=80&max_id=01FC0SKA48HNSVR6YKZCQGS2V8>; rel="next", <https://example.org/api/v1/follow_requests?limit=80&min_id=01FC0SKW5JK2Q4EVAV2B462YY0>; rel="prev"
````
*/
func (a *Client) GetFollowRequests(params *GetFollowRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFollowRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFollowRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFollowRequests",
		Method:             "GET",
		PathPattern:        "/api/v1/follow_requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFollowRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFollowRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFollowRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectFollowRequest rejects deny follow request from the given account ID
*/
func (a *Client) RejectFollowRequest(params *RejectFollowRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectFollowRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectFollowRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectFollowRequest",
		Method:             "POST",
		PathPattern:        "/api/v1/follow_requests/{account_id}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RejectFollowRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectFollowRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectFollowRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
