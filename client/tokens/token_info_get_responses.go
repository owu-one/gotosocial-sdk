// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// TokenInfoGetReader is a Reader for the TokenInfoGet structure.
type TokenInfoGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TokenInfoGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTokenInfoGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTokenInfoGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTokenInfoGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTokenInfoGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewTokenInfoGetNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTokenInfoGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/tokens/{id}] tokenInfoGet", response, response.Code())
	}
}

// NewTokenInfoGetOK creates a TokenInfoGetOK with default headers values
func NewTokenInfoGetOK() *TokenInfoGetOK {
	return &TokenInfoGetOK{}
}

/*
TokenInfoGetOK describes a response with status code 200, with default header values.

The requested token.
*/
type TokenInfoGetOK struct {
	Payload *models.TokenInfo
}

// IsSuccess returns true when this token info get o k response has a 2xx status code
func (o *TokenInfoGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this token info get o k response has a 3xx status code
func (o *TokenInfoGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token info get o k response has a 4xx status code
func (o *TokenInfoGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this token info get o k response has a 5xx status code
func (o *TokenInfoGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this token info get o k response a status code equal to that given
func (o *TokenInfoGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the token info get o k response
func (o *TokenInfoGetOK) Code() int {
	return 200
}

func (o *TokenInfoGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetOK %s", 200, payload)
}

func (o *TokenInfoGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetOK %s", 200, payload)
}

func (o *TokenInfoGetOK) GetPayload() *models.TokenInfo {
	return o.Payload
}

func (o *TokenInfoGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenInfoGetBadRequest creates a TokenInfoGetBadRequest with default headers values
func NewTokenInfoGetBadRequest() *TokenInfoGetBadRequest {
	return &TokenInfoGetBadRequest{}
}

/*
TokenInfoGetBadRequest describes a response with status code 400, with default header values.

bad request
*/
type TokenInfoGetBadRequest struct {
}

// IsSuccess returns true when this token info get bad request response has a 2xx status code
func (o *TokenInfoGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token info get bad request response has a 3xx status code
func (o *TokenInfoGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token info get bad request response has a 4xx status code
func (o *TokenInfoGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this token info get bad request response has a 5xx status code
func (o *TokenInfoGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this token info get bad request response a status code equal to that given
func (o *TokenInfoGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the token info get bad request response
func (o *TokenInfoGetBadRequest) Code() int {
	return 400
}

func (o *TokenInfoGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetBadRequest", 400)
}

func (o *TokenInfoGetBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetBadRequest", 400)
}

func (o *TokenInfoGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTokenInfoGetUnauthorized creates a TokenInfoGetUnauthorized with default headers values
func NewTokenInfoGetUnauthorized() *TokenInfoGetUnauthorized {
	return &TokenInfoGetUnauthorized{}
}

/*
TokenInfoGetUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type TokenInfoGetUnauthorized struct {
}

// IsSuccess returns true when this token info get unauthorized response has a 2xx status code
func (o *TokenInfoGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token info get unauthorized response has a 3xx status code
func (o *TokenInfoGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token info get unauthorized response has a 4xx status code
func (o *TokenInfoGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this token info get unauthorized response has a 5xx status code
func (o *TokenInfoGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this token info get unauthorized response a status code equal to that given
func (o *TokenInfoGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the token info get unauthorized response
func (o *TokenInfoGetUnauthorized) Code() int {
	return 401
}

func (o *TokenInfoGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetUnauthorized", 401)
}

func (o *TokenInfoGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetUnauthorized", 401)
}

func (o *TokenInfoGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTokenInfoGetNotFound creates a TokenInfoGetNotFound with default headers values
func NewTokenInfoGetNotFound() *TokenInfoGetNotFound {
	return &TokenInfoGetNotFound{}
}

/*
TokenInfoGetNotFound describes a response with status code 404, with default header values.

not found
*/
type TokenInfoGetNotFound struct {
}

// IsSuccess returns true when this token info get not found response has a 2xx status code
func (o *TokenInfoGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token info get not found response has a 3xx status code
func (o *TokenInfoGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token info get not found response has a 4xx status code
func (o *TokenInfoGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this token info get not found response has a 5xx status code
func (o *TokenInfoGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this token info get not found response a status code equal to that given
func (o *TokenInfoGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the token info get not found response
func (o *TokenInfoGetNotFound) Code() int {
	return 404
}

func (o *TokenInfoGetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetNotFound", 404)
}

func (o *TokenInfoGetNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetNotFound", 404)
}

func (o *TokenInfoGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTokenInfoGetNotAcceptable creates a TokenInfoGetNotAcceptable with default headers values
func NewTokenInfoGetNotAcceptable() *TokenInfoGetNotAcceptable {
	return &TokenInfoGetNotAcceptable{}
}

/*
TokenInfoGetNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type TokenInfoGetNotAcceptable struct {
}

// IsSuccess returns true when this token info get not acceptable response has a 2xx status code
func (o *TokenInfoGetNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token info get not acceptable response has a 3xx status code
func (o *TokenInfoGetNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token info get not acceptable response has a 4xx status code
func (o *TokenInfoGetNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this token info get not acceptable response has a 5xx status code
func (o *TokenInfoGetNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this token info get not acceptable response a status code equal to that given
func (o *TokenInfoGetNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the token info get not acceptable response
func (o *TokenInfoGetNotAcceptable) Code() int {
	return 406
}

func (o *TokenInfoGetNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetNotAcceptable", 406)
}

func (o *TokenInfoGetNotAcceptable) String() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetNotAcceptable", 406)
}

func (o *TokenInfoGetNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTokenInfoGetInternalServerError creates a TokenInfoGetInternalServerError with default headers values
func NewTokenInfoGetInternalServerError() *TokenInfoGetInternalServerError {
	return &TokenInfoGetInternalServerError{}
}

/*
TokenInfoGetInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type TokenInfoGetInternalServerError struct {
}

// IsSuccess returns true when this token info get internal server error response has a 2xx status code
func (o *TokenInfoGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token info get internal server error response has a 3xx status code
func (o *TokenInfoGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token info get internal server error response has a 4xx status code
func (o *TokenInfoGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this token info get internal server error response has a 5xx status code
func (o *TokenInfoGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this token info get internal server error response a status code equal to that given
func (o *TokenInfoGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the token info get internal server error response
func (o *TokenInfoGetInternalServerError) Code() int {
	return 500
}

func (o *TokenInfoGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetInternalServerError", 500)
}

func (o *TokenInfoGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/tokens/{id}][%d] tokenInfoGetInternalServerError", 500)
}

func (o *TokenInfoGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
