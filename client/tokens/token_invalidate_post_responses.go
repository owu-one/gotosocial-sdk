// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/owu-one/gotosocial-sdk/models"
)

// TokenInvalidatePostReader is a Reader for the TokenInvalidatePost structure.
type TokenInvalidatePostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TokenInvalidatePostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTokenInvalidatePostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTokenInvalidatePostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTokenInvalidatePostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTokenInvalidatePostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewTokenInvalidatePostNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTokenInvalidatePostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/v1/tokens/{id}/invalidate] tokenInvalidatePost", response, response.Code())
	}
}

// NewTokenInvalidatePostOK creates a TokenInvalidatePostOK with default headers values
func NewTokenInvalidatePostOK() *TokenInvalidatePostOK {
	return &TokenInvalidatePostOK{}
}

/*
TokenInvalidatePostOK describes a response with status code 200, with default header values.

Info about the invalidated token.
*/
type TokenInvalidatePostOK struct {
	Payload *models.TokenInfo
}

// IsSuccess returns true when this token invalidate post o k response has a 2xx status code
func (o *TokenInvalidatePostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this token invalidate post o k response has a 3xx status code
func (o *TokenInvalidatePostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token invalidate post o k response has a 4xx status code
func (o *TokenInvalidatePostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this token invalidate post o k response has a 5xx status code
func (o *TokenInvalidatePostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this token invalidate post o k response a status code equal to that given
func (o *TokenInvalidatePostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the token invalidate post o k response
func (o *TokenInvalidatePostOK) Code() int {
	return 200
}

func (o *TokenInvalidatePostOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostOK %s", 200, payload)
}

func (o *TokenInvalidatePostOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostOK %s", 200, payload)
}

func (o *TokenInvalidatePostOK) GetPayload() *models.TokenInfo {
	return o.Payload
}

func (o *TokenInvalidatePostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenInvalidatePostBadRequest creates a TokenInvalidatePostBadRequest with default headers values
func NewTokenInvalidatePostBadRequest() *TokenInvalidatePostBadRequest {
	return &TokenInvalidatePostBadRequest{}
}

/*
TokenInvalidatePostBadRequest describes a response with status code 400, with default header values.

bad request
*/
type TokenInvalidatePostBadRequest struct {
}

// IsSuccess returns true when this token invalidate post bad request response has a 2xx status code
func (o *TokenInvalidatePostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token invalidate post bad request response has a 3xx status code
func (o *TokenInvalidatePostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token invalidate post bad request response has a 4xx status code
func (o *TokenInvalidatePostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this token invalidate post bad request response has a 5xx status code
func (o *TokenInvalidatePostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this token invalidate post bad request response a status code equal to that given
func (o *TokenInvalidatePostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the token invalidate post bad request response
func (o *TokenInvalidatePostBadRequest) Code() int {
	return 400
}

func (o *TokenInvalidatePostBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostBadRequest", 400)
}

func (o *TokenInvalidatePostBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostBadRequest", 400)
}

func (o *TokenInvalidatePostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTokenInvalidatePostUnauthorized creates a TokenInvalidatePostUnauthorized with default headers values
func NewTokenInvalidatePostUnauthorized() *TokenInvalidatePostUnauthorized {
	return &TokenInvalidatePostUnauthorized{}
}

/*
TokenInvalidatePostUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type TokenInvalidatePostUnauthorized struct {
}

// IsSuccess returns true when this token invalidate post unauthorized response has a 2xx status code
func (o *TokenInvalidatePostUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token invalidate post unauthorized response has a 3xx status code
func (o *TokenInvalidatePostUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token invalidate post unauthorized response has a 4xx status code
func (o *TokenInvalidatePostUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this token invalidate post unauthorized response has a 5xx status code
func (o *TokenInvalidatePostUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this token invalidate post unauthorized response a status code equal to that given
func (o *TokenInvalidatePostUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the token invalidate post unauthorized response
func (o *TokenInvalidatePostUnauthorized) Code() int {
	return 401
}

func (o *TokenInvalidatePostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostUnauthorized", 401)
}

func (o *TokenInvalidatePostUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostUnauthorized", 401)
}

func (o *TokenInvalidatePostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTokenInvalidatePostNotFound creates a TokenInvalidatePostNotFound with default headers values
func NewTokenInvalidatePostNotFound() *TokenInvalidatePostNotFound {
	return &TokenInvalidatePostNotFound{}
}

/*
TokenInvalidatePostNotFound describes a response with status code 404, with default header values.

not found
*/
type TokenInvalidatePostNotFound struct {
}

// IsSuccess returns true when this token invalidate post not found response has a 2xx status code
func (o *TokenInvalidatePostNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token invalidate post not found response has a 3xx status code
func (o *TokenInvalidatePostNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token invalidate post not found response has a 4xx status code
func (o *TokenInvalidatePostNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this token invalidate post not found response has a 5xx status code
func (o *TokenInvalidatePostNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this token invalidate post not found response a status code equal to that given
func (o *TokenInvalidatePostNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the token invalidate post not found response
func (o *TokenInvalidatePostNotFound) Code() int {
	return 404
}

func (o *TokenInvalidatePostNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostNotFound", 404)
}

func (o *TokenInvalidatePostNotFound) String() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostNotFound", 404)
}

func (o *TokenInvalidatePostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTokenInvalidatePostNotAcceptable creates a TokenInvalidatePostNotAcceptable with default headers values
func NewTokenInvalidatePostNotAcceptable() *TokenInvalidatePostNotAcceptable {
	return &TokenInvalidatePostNotAcceptable{}
}

/*
TokenInvalidatePostNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type TokenInvalidatePostNotAcceptable struct {
}

// IsSuccess returns true when this token invalidate post not acceptable response has a 2xx status code
func (o *TokenInvalidatePostNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token invalidate post not acceptable response has a 3xx status code
func (o *TokenInvalidatePostNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token invalidate post not acceptable response has a 4xx status code
func (o *TokenInvalidatePostNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this token invalidate post not acceptable response has a 5xx status code
func (o *TokenInvalidatePostNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this token invalidate post not acceptable response a status code equal to that given
func (o *TokenInvalidatePostNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the token invalidate post not acceptable response
func (o *TokenInvalidatePostNotAcceptable) Code() int {
	return 406
}

func (o *TokenInvalidatePostNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostNotAcceptable", 406)
}

func (o *TokenInvalidatePostNotAcceptable) String() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostNotAcceptable", 406)
}

func (o *TokenInvalidatePostNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTokenInvalidatePostInternalServerError creates a TokenInvalidatePostInternalServerError with default headers values
func NewTokenInvalidatePostInternalServerError() *TokenInvalidatePostInternalServerError {
	return &TokenInvalidatePostInternalServerError{}
}

/*
TokenInvalidatePostInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type TokenInvalidatePostInternalServerError struct {
}

// IsSuccess returns true when this token invalidate post internal server error response has a 2xx status code
func (o *TokenInvalidatePostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token invalidate post internal server error response has a 3xx status code
func (o *TokenInvalidatePostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token invalidate post internal server error response has a 4xx status code
func (o *TokenInvalidatePostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this token invalidate post internal server error response has a 5xx status code
func (o *TokenInvalidatePostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this token invalidate post internal server error response a status code equal to that given
func (o *TokenInvalidatePostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the token invalidate post internal server error response
func (o *TokenInvalidatePostInternalServerError) Code() int {
	return 500
}

func (o *TokenInvalidatePostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostInternalServerError", 500)
}

func (o *TokenInvalidatePostInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/tokens/{id}/invalidate][%d] tokenInvalidatePostInternalServerError", 500)
}

func (o *TokenInvalidatePostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
