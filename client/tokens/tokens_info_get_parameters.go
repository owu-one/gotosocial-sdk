// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTokensInfoGetParams creates a new TokensInfoGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTokensInfoGetParams() *TokensInfoGetParams {
	return &TokensInfoGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTokensInfoGetParamsWithTimeout creates a new TokensInfoGetParams object
// with the ability to set a timeout on a request.
func NewTokensInfoGetParamsWithTimeout(timeout time.Duration) *TokensInfoGetParams {
	return &TokensInfoGetParams{
		timeout: timeout,
	}
}

// NewTokensInfoGetParamsWithContext creates a new TokensInfoGetParams object
// with the ability to set a context for a request.
func NewTokensInfoGetParamsWithContext(ctx context.Context) *TokensInfoGetParams {
	return &TokensInfoGetParams{
		Context: ctx,
	}
}

// NewTokensInfoGetParamsWithHTTPClient creates a new TokensInfoGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewTokensInfoGetParamsWithHTTPClient(client *http.Client) *TokensInfoGetParams {
	return &TokensInfoGetParams{
		HTTPClient: client,
	}
}

/*
TokensInfoGetParams contains all the parameters to send to the API endpoint

	for the tokens info get operation.

	Typically these are written to a http.Request.
*/
type TokensInfoGetParams struct {

	/* Limit.

	   Number of items to return.

	   Default: 20
	*/
	Limit *int64

	/* MaxID.

	   Return only items *OLDER* than the given max status ID. The item with the specified ID will not be included in the response.
	*/
	MaxID *string

	/* MinID.

	   Return only items *immediately newer* than the given since status ID. The item with the specified ID will not be included in the response.
	*/
	MinID *string

	/* SinceID.

	   Return only items *newer* than the given since status ID. The item with the specified ID will not be included in the response.
	*/
	SinceID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the tokens info get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TokensInfoGetParams) WithDefaults() *TokensInfoGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the tokens info get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TokensInfoGetParams) SetDefaults() {
	var (
		limitDefault = int64(20)
	)

	val := TokensInfoGetParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the tokens info get params
func (o *TokensInfoGetParams) WithTimeout(timeout time.Duration) *TokensInfoGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tokens info get params
func (o *TokensInfoGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tokens info get params
func (o *TokensInfoGetParams) WithContext(ctx context.Context) *TokensInfoGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tokens info get params
func (o *TokensInfoGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tokens info get params
func (o *TokensInfoGetParams) WithHTTPClient(client *http.Client) *TokensInfoGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tokens info get params
func (o *TokensInfoGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the tokens info get params
func (o *TokensInfoGetParams) WithLimit(limit *int64) *TokensInfoGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the tokens info get params
func (o *TokensInfoGetParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithMaxID adds the maxID to the tokens info get params
func (o *TokensInfoGetParams) WithMaxID(maxID *string) *TokensInfoGetParams {
	o.SetMaxID(maxID)
	return o
}

// SetMaxID adds the maxId to the tokens info get params
func (o *TokensInfoGetParams) SetMaxID(maxID *string) {
	o.MaxID = maxID
}

// WithMinID adds the minID to the tokens info get params
func (o *TokensInfoGetParams) WithMinID(minID *string) *TokensInfoGetParams {
	o.SetMinID(minID)
	return o
}

// SetMinID adds the minId to the tokens info get params
func (o *TokensInfoGetParams) SetMinID(minID *string) {
	o.MinID = minID
}

// WithSinceID adds the sinceID to the tokens info get params
func (o *TokensInfoGetParams) WithSinceID(sinceID *string) *TokensInfoGetParams {
	o.SetSinceID(sinceID)
	return o
}

// SetSinceID adds the sinceId to the tokens info get params
func (o *TokensInfoGetParams) SetSinceID(sinceID *string) {
	o.SinceID = sinceID
}

// WriteToRequest writes these params to a swagger request
func (o *TokensInfoGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.MaxID != nil {

		// query param max_id
		var qrMaxID string

		if o.MaxID != nil {
			qrMaxID = *o.MaxID
		}
		qMaxID := qrMaxID
		if qMaxID != "" {

			if err := r.SetQueryParam("max_id", qMaxID); err != nil {
				return err
			}
		}
	}

	if o.MinID != nil {

		// query param min_id
		var qrMinID string

		if o.MinID != nil {
			qrMinID = *o.MinID
		}
		qMinID := qrMinID
		if qMinID != "" {

			if err := r.SetQueryParam("min_id", qMinID); err != nil {
				return err
			}
		}
	}

	if o.SinceID != nil {

		// query param since_id
		var qrSinceID string

		if o.SinceID != nil {
			qrSinceID = *o.SinceID
		}
		qSinceID := qrSinceID
		if qSinceID != "" {

			if err := r.SetQueryParam("since_id", qSinceID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
