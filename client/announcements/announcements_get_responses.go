// Code generated by go-swagger; DO NOT EDIT.

package announcements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AnnouncementsGetReader is a Reader for the AnnouncementsGet structure.
type AnnouncementsGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AnnouncementsGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAnnouncementsGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAnnouncementsGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAnnouncementsGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewAnnouncementsGetNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAnnouncementsGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/announcements] announcementsGet", response, response.Code())
	}
}

// NewAnnouncementsGetOK creates a AnnouncementsGetOK with default headers values
func NewAnnouncementsGetOK() *AnnouncementsGetOK {
	return &AnnouncementsGetOK{}
}

/*
AnnouncementsGetOK describes a response with status code 200, with default header values.

AnnouncementsGetOK announcements get o k
*/
type AnnouncementsGetOK struct {
	Payload []interface{}
}

// IsSuccess returns true when this announcements get o k response has a 2xx status code
func (o *AnnouncementsGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this announcements get o k response has a 3xx status code
func (o *AnnouncementsGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this announcements get o k response has a 4xx status code
func (o *AnnouncementsGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this announcements get o k response has a 5xx status code
func (o *AnnouncementsGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this announcements get o k response a status code equal to that given
func (o *AnnouncementsGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the announcements get o k response
func (o *AnnouncementsGetOK) Code() int {
	return 200
}

func (o *AnnouncementsGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetOK %s", 200, payload)
}

func (o *AnnouncementsGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetOK %s", 200, payload)
}

func (o *AnnouncementsGetOK) GetPayload() []interface{} {
	return o.Payload
}

func (o *AnnouncementsGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnnouncementsGetBadRequest creates a AnnouncementsGetBadRequest with default headers values
func NewAnnouncementsGetBadRequest() *AnnouncementsGetBadRequest {
	return &AnnouncementsGetBadRequest{}
}

/*
AnnouncementsGetBadRequest describes a response with status code 400, with default header values.

bad request
*/
type AnnouncementsGetBadRequest struct {
}

// IsSuccess returns true when this announcements get bad request response has a 2xx status code
func (o *AnnouncementsGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this announcements get bad request response has a 3xx status code
func (o *AnnouncementsGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this announcements get bad request response has a 4xx status code
func (o *AnnouncementsGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this announcements get bad request response has a 5xx status code
func (o *AnnouncementsGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this announcements get bad request response a status code equal to that given
func (o *AnnouncementsGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the announcements get bad request response
func (o *AnnouncementsGetBadRequest) Code() int {
	return 400
}

func (o *AnnouncementsGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetBadRequest", 400)
}

func (o *AnnouncementsGetBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetBadRequest", 400)
}

func (o *AnnouncementsGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAnnouncementsGetUnauthorized creates a AnnouncementsGetUnauthorized with default headers values
func NewAnnouncementsGetUnauthorized() *AnnouncementsGetUnauthorized {
	return &AnnouncementsGetUnauthorized{}
}

/*
AnnouncementsGetUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type AnnouncementsGetUnauthorized struct {
}

// IsSuccess returns true when this announcements get unauthorized response has a 2xx status code
func (o *AnnouncementsGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this announcements get unauthorized response has a 3xx status code
func (o *AnnouncementsGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this announcements get unauthorized response has a 4xx status code
func (o *AnnouncementsGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this announcements get unauthorized response has a 5xx status code
func (o *AnnouncementsGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this announcements get unauthorized response a status code equal to that given
func (o *AnnouncementsGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the announcements get unauthorized response
func (o *AnnouncementsGetUnauthorized) Code() int {
	return 401
}

func (o *AnnouncementsGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetUnauthorized", 401)
}

func (o *AnnouncementsGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetUnauthorized", 401)
}

func (o *AnnouncementsGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAnnouncementsGetNotAcceptable creates a AnnouncementsGetNotAcceptable with default headers values
func NewAnnouncementsGetNotAcceptable() *AnnouncementsGetNotAcceptable {
	return &AnnouncementsGetNotAcceptable{}
}

/*
AnnouncementsGetNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type AnnouncementsGetNotAcceptable struct {
}

// IsSuccess returns true when this announcements get not acceptable response has a 2xx status code
func (o *AnnouncementsGetNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this announcements get not acceptable response has a 3xx status code
func (o *AnnouncementsGetNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this announcements get not acceptable response has a 4xx status code
func (o *AnnouncementsGetNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this announcements get not acceptable response has a 5xx status code
func (o *AnnouncementsGetNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this announcements get not acceptable response a status code equal to that given
func (o *AnnouncementsGetNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the announcements get not acceptable response
func (o *AnnouncementsGetNotAcceptable) Code() int {
	return 406
}

func (o *AnnouncementsGetNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetNotAcceptable", 406)
}

func (o *AnnouncementsGetNotAcceptable) String() string {
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetNotAcceptable", 406)
}

func (o *AnnouncementsGetNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAnnouncementsGetInternalServerError creates a AnnouncementsGetInternalServerError with default headers values
func NewAnnouncementsGetInternalServerError() *AnnouncementsGetInternalServerError {
	return &AnnouncementsGetInternalServerError{}
}

/*
AnnouncementsGetInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type AnnouncementsGetInternalServerError struct {
}

// IsSuccess returns true when this announcements get internal server error response has a 2xx status code
func (o *AnnouncementsGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this announcements get internal server error response has a 3xx status code
func (o *AnnouncementsGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this announcements get internal server error response has a 4xx status code
func (o *AnnouncementsGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this announcements get internal server error response has a 5xx status code
func (o *AnnouncementsGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this announcements get internal server error response a status code equal to that given
func (o *AnnouncementsGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the announcements get internal server error response
func (o *AnnouncementsGetInternalServerError) Code() int {
	return 500
}

func (o *AnnouncementsGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetInternalServerError", 500)
}

func (o *AnnouncementsGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/announcements][%d] announcementsGetInternalServerError", 500)
}

func (o *AnnouncementsGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
