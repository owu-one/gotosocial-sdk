// Code generated by go-swagger; DO NOT EDIT.

package import_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewImportDataParams creates a new ImportDataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewImportDataParams() *ImportDataParams {
	return &ImportDataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewImportDataParamsWithTimeout creates a new ImportDataParams object
// with the ability to set a timeout on a request.
func NewImportDataParamsWithTimeout(timeout time.Duration) *ImportDataParams {
	return &ImportDataParams{
		timeout: timeout,
	}
}

// NewImportDataParamsWithContext creates a new ImportDataParams object
// with the ability to set a context for a request.
func NewImportDataParamsWithContext(ctx context.Context) *ImportDataParams {
	return &ImportDataParams{
		Context: ctx,
	}
}

// NewImportDataParamsWithHTTPClient creates a new ImportDataParams object
// with the ability to set a custom HTTPClient for a request.
func NewImportDataParamsWithHTTPClient(client *http.Client) *ImportDataParams {
	return &ImportDataParams{
		HTTPClient: client,
	}
}

/*
ImportDataParams contains all the parameters to send to the API endpoint

	for the import data operation.

	Typically these are written to a http.Request.
*/
type ImportDataParams struct {

	/* Data.

	   The CSV data file to upload.
	*/
	Data runtime.NamedReadCloser

	/* Mode.

	     Mode to use when creating entries from the data file:
	- `merge` to merge entries in file with existing entries. - `overwrite` to replace existing entries with entries in file.

	     Default: "merge"
	*/
	Mode *string

	/* Type.

	     Type of entries contained in the data file:
	- `following` - accounts to follow. - `blocks` - accounts to block.
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the import data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportDataParams) WithDefaults() *ImportDataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the import data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportDataParams) SetDefaults() {
	var (
		modeDefault = string("merge")
	)

	val := ImportDataParams{
		Mode: &modeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the import data params
func (o *ImportDataParams) WithTimeout(timeout time.Duration) *ImportDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import data params
func (o *ImportDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import data params
func (o *ImportDataParams) WithContext(ctx context.Context) *ImportDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import data params
func (o *ImportDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import data params
func (o *ImportDataParams) WithHTTPClient(client *http.Client) *ImportDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import data params
func (o *ImportDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithData adds the data to the import data params
func (o *ImportDataParams) WithData(data runtime.NamedReadCloser) *ImportDataParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the import data params
func (o *ImportDataParams) SetData(data runtime.NamedReadCloser) {
	o.Data = data
}

// WithMode adds the mode to the import data params
func (o *ImportDataParams) WithMode(mode *string) *ImportDataParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the import data params
func (o *ImportDataParams) SetMode(mode *string) {
	o.Mode = mode
}

// WithType adds the typeVar to the import data params
func (o *ImportDataParams) WithType(typeVar string) *ImportDataParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the import data params
func (o *ImportDataParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ImportDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param data
	if err := r.SetFileParam("data", o.Data); err != nil {
		return err
	}

	if o.Mode != nil {

		// form param mode
		var frMode string
		if o.Mode != nil {
			frMode = *o.Mode
		}
		fMode := frMode
		if fMode != "" {
			if err := r.SetFormParam("mode", fMode); err != nil {
				return err
			}
		}
	}

	// form param type
	frType := o.Type
	fType := frType
	if fType != "" {
		if err := r.SetFormParam("type", fType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
