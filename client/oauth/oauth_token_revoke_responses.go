// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// OauthTokenRevokeReader is a Reader for the OauthTokenRevoke structure.
type OauthTokenRevokeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OauthTokenRevokeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOauthTokenRevokeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOauthTokenRevokeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOauthTokenRevokeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewOauthTokenRevokeNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOauthTokenRevokeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /oauth/revoke] oauthTokenRevoke", response, response.Code())
	}
}

// NewOauthTokenRevokeOK creates a OauthTokenRevokeOK with default headers values
func NewOauthTokenRevokeOK() *OauthTokenRevokeOK {
	return &OauthTokenRevokeOK{}
}

/*
OauthTokenRevokeOK describes a response with status code 200, with default header values.

OK - If you own the provided token, the API call will provide OK and an empty response `{}`. This operation is idempotent, so calling this API multiple times will still return OK.
*/
type OauthTokenRevokeOK struct {
}

// IsSuccess returns true when this oauth token revoke o k response has a 2xx status code
func (o *OauthTokenRevokeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this oauth token revoke o k response has a 3xx status code
func (o *OauthTokenRevokeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this oauth token revoke o k response has a 4xx status code
func (o *OauthTokenRevokeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this oauth token revoke o k response has a 5xx status code
func (o *OauthTokenRevokeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this oauth token revoke o k response a status code equal to that given
func (o *OauthTokenRevokeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the oauth token revoke o k response
func (o *OauthTokenRevokeOK) Code() int {
	return 200
}

func (o *OauthTokenRevokeOK) Error() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeOK", 200)
}

func (o *OauthTokenRevokeOK) String() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeOK", 200)
}

func (o *OauthTokenRevokeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOauthTokenRevokeBadRequest creates a OauthTokenRevokeBadRequest with default headers values
func NewOauthTokenRevokeBadRequest() *OauthTokenRevokeBadRequest {
	return &OauthTokenRevokeBadRequest{}
}

/*
OauthTokenRevokeBadRequest describes a response with status code 400, with default header values.

bad request
*/
type OauthTokenRevokeBadRequest struct {
}

// IsSuccess returns true when this oauth token revoke bad request response has a 2xx status code
func (o *OauthTokenRevokeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this oauth token revoke bad request response has a 3xx status code
func (o *OauthTokenRevokeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this oauth token revoke bad request response has a 4xx status code
func (o *OauthTokenRevokeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this oauth token revoke bad request response has a 5xx status code
func (o *OauthTokenRevokeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this oauth token revoke bad request response a status code equal to that given
func (o *OauthTokenRevokeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the oauth token revoke bad request response
func (o *OauthTokenRevokeBadRequest) Code() int {
	return 400
}

func (o *OauthTokenRevokeBadRequest) Error() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeBadRequest", 400)
}

func (o *OauthTokenRevokeBadRequest) String() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeBadRequest", 400)
}

func (o *OauthTokenRevokeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOauthTokenRevokeForbidden creates a OauthTokenRevokeForbidden with default headers values
func NewOauthTokenRevokeForbidden() *OauthTokenRevokeForbidden {
	return &OauthTokenRevokeForbidden{}
}

/*
OauthTokenRevokeForbidden describes a response with status code 403, with default header values.

forbidden - If you provide a token you do not own, the API call will return a 403 error.
*/
type OauthTokenRevokeForbidden struct {
}

// IsSuccess returns true when this oauth token revoke forbidden response has a 2xx status code
func (o *OauthTokenRevokeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this oauth token revoke forbidden response has a 3xx status code
func (o *OauthTokenRevokeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this oauth token revoke forbidden response has a 4xx status code
func (o *OauthTokenRevokeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this oauth token revoke forbidden response has a 5xx status code
func (o *OauthTokenRevokeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this oauth token revoke forbidden response a status code equal to that given
func (o *OauthTokenRevokeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the oauth token revoke forbidden response
func (o *OauthTokenRevokeForbidden) Code() int {
	return 403
}

func (o *OauthTokenRevokeForbidden) Error() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeForbidden", 403)
}

func (o *OauthTokenRevokeForbidden) String() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeForbidden", 403)
}

func (o *OauthTokenRevokeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOauthTokenRevokeNotAcceptable creates a OauthTokenRevokeNotAcceptable with default headers values
func NewOauthTokenRevokeNotAcceptable() *OauthTokenRevokeNotAcceptable {
	return &OauthTokenRevokeNotAcceptable{}
}

/*
OauthTokenRevokeNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type OauthTokenRevokeNotAcceptable struct {
}

// IsSuccess returns true when this oauth token revoke not acceptable response has a 2xx status code
func (o *OauthTokenRevokeNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this oauth token revoke not acceptable response has a 3xx status code
func (o *OauthTokenRevokeNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this oauth token revoke not acceptable response has a 4xx status code
func (o *OauthTokenRevokeNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this oauth token revoke not acceptable response has a 5xx status code
func (o *OauthTokenRevokeNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this oauth token revoke not acceptable response a status code equal to that given
func (o *OauthTokenRevokeNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the oauth token revoke not acceptable response
func (o *OauthTokenRevokeNotAcceptable) Code() int {
	return 406
}

func (o *OauthTokenRevokeNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeNotAcceptable", 406)
}

func (o *OauthTokenRevokeNotAcceptable) String() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeNotAcceptable", 406)
}

func (o *OauthTokenRevokeNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOauthTokenRevokeInternalServerError creates a OauthTokenRevokeInternalServerError with default headers values
func NewOauthTokenRevokeInternalServerError() *OauthTokenRevokeInternalServerError {
	return &OauthTokenRevokeInternalServerError{}
}

/*
OauthTokenRevokeInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type OauthTokenRevokeInternalServerError struct {
}

// IsSuccess returns true when this oauth token revoke internal server error response has a 2xx status code
func (o *OauthTokenRevokeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this oauth token revoke internal server error response has a 3xx status code
func (o *OauthTokenRevokeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this oauth token revoke internal server error response has a 4xx status code
func (o *OauthTokenRevokeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this oauth token revoke internal server error response has a 5xx status code
func (o *OauthTokenRevokeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this oauth token revoke internal server error response a status code equal to that given
func (o *OauthTokenRevokeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the oauth token revoke internal server error response
func (o *OauthTokenRevokeInternalServerError) Code() int {
	return 500
}

func (o *OauthTokenRevokeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeInternalServerError", 500)
}

func (o *OauthTokenRevokeInternalServerError) String() string {
	return fmt.Sprintf("[POST /oauth/revoke][%d] oauthTokenRevokeInternalServerError", 500)
}

func (o *OauthTokenRevokeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
