// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewOauthTokenRevokeParams creates a new OauthTokenRevokeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewOauthTokenRevokeParams() *OauthTokenRevokeParams {
	return &OauthTokenRevokeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewOauthTokenRevokeParamsWithTimeout creates a new OauthTokenRevokeParams object
// with the ability to set a timeout on a request.
func NewOauthTokenRevokeParamsWithTimeout(timeout time.Duration) *OauthTokenRevokeParams {
	return &OauthTokenRevokeParams{
		timeout: timeout,
	}
}

// NewOauthTokenRevokeParamsWithContext creates a new OauthTokenRevokeParams object
// with the ability to set a context for a request.
func NewOauthTokenRevokeParamsWithContext(ctx context.Context) *OauthTokenRevokeParams {
	return &OauthTokenRevokeParams{
		Context: ctx,
	}
}

// NewOauthTokenRevokeParamsWithHTTPClient creates a new OauthTokenRevokeParams object
// with the ability to set a custom HTTPClient for a request.
func NewOauthTokenRevokeParamsWithHTTPClient(client *http.Client) *OauthTokenRevokeParams {
	return &OauthTokenRevokeParams{
		HTTPClient: client,
	}
}

/*
OauthTokenRevokeParams contains all the parameters to send to the API endpoint

	for the oauth token revoke operation.

	Typically these are written to a http.Request.
*/
type OauthTokenRevokeParams struct {

	/* ClientID.

	   The client ID, obtained during app registration.
	*/
	ClientID string

	/* ClientSecret.

	   The client secret, obtained during app registration.
	*/
	ClientSecret string

	/* Token.

	   The previously obtained token, to be invalidated.
	*/
	Token string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the oauth token revoke params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OauthTokenRevokeParams) WithDefaults() *OauthTokenRevokeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the oauth token revoke params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OauthTokenRevokeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the oauth token revoke params
func (o *OauthTokenRevokeParams) WithTimeout(timeout time.Duration) *OauthTokenRevokeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the oauth token revoke params
func (o *OauthTokenRevokeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the oauth token revoke params
func (o *OauthTokenRevokeParams) WithContext(ctx context.Context) *OauthTokenRevokeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the oauth token revoke params
func (o *OauthTokenRevokeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the oauth token revoke params
func (o *OauthTokenRevokeParams) WithHTTPClient(client *http.Client) *OauthTokenRevokeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the oauth token revoke params
func (o *OauthTokenRevokeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the oauth token revoke params
func (o *OauthTokenRevokeParams) WithClientID(clientID string) *OauthTokenRevokeParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the oauth token revoke params
func (o *OauthTokenRevokeParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithClientSecret adds the clientSecret to the oauth token revoke params
func (o *OauthTokenRevokeParams) WithClientSecret(clientSecret string) *OauthTokenRevokeParams {
	o.SetClientSecret(clientSecret)
	return o
}

// SetClientSecret adds the clientSecret to the oauth token revoke params
func (o *OauthTokenRevokeParams) SetClientSecret(clientSecret string) {
	o.ClientSecret = clientSecret
}

// WithToken adds the token to the oauth token revoke params
func (o *OauthTokenRevokeParams) WithToken(token string) *OauthTokenRevokeParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the oauth token revoke params
func (o *OauthTokenRevokeParams) SetToken(token string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *OauthTokenRevokeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param client_id
	frClientID := o.ClientID
	fClientID := frClientID
	if fClientID != "" {
		if err := r.SetFormParam("client_id", fClientID); err != nil {
			return err
		}
	}

	// form param client_secret
	frClientSecret := o.ClientSecret
	fClientSecret := frClientSecret
	if fClientSecret != "" {
		if err := r.SetFormParam("client_secret", fClientSecret); err != nil {
			return err
		}
	}

	// form param token
	frToken := o.Token
	fToken := frToken
	if fToken != "" {
		if err := r.SetFormParam("token", fToken); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
