// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ConversationDeleteReader is a Reader for the ConversationDelete structure.
type ConversationDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConversationDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConversationDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConversationDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewConversationDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConversationDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewConversationDeleteNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConversationDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /api/v1/conversations/{id}] conversationDelete", response, response.Code())
	}
}

// NewConversationDeleteOK creates a ConversationDeleteOK with default headers values
func NewConversationDeleteOK() *ConversationDeleteOK {
	return &ConversationDeleteOK{}
}

/*
ConversationDeleteOK describes a response with status code 200, with default header values.

conversation deleted
*/
type ConversationDeleteOK struct {
}

// IsSuccess returns true when this conversation delete o k response has a 2xx status code
func (o *ConversationDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this conversation delete o k response has a 3xx status code
func (o *ConversationDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this conversation delete o k response has a 4xx status code
func (o *ConversationDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this conversation delete o k response has a 5xx status code
func (o *ConversationDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this conversation delete o k response a status code equal to that given
func (o *ConversationDeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the conversation delete o k response
func (o *ConversationDeleteOK) Code() int {
	return 200
}

func (o *ConversationDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteOK", 200)
}

func (o *ConversationDeleteOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteOK", 200)
}

func (o *ConversationDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConversationDeleteBadRequest creates a ConversationDeleteBadRequest with default headers values
func NewConversationDeleteBadRequest() *ConversationDeleteBadRequest {
	return &ConversationDeleteBadRequest{}
}

/*
ConversationDeleteBadRequest describes a response with status code 400, with default header values.

bad request
*/
type ConversationDeleteBadRequest struct {
}

// IsSuccess returns true when this conversation delete bad request response has a 2xx status code
func (o *ConversationDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this conversation delete bad request response has a 3xx status code
func (o *ConversationDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this conversation delete bad request response has a 4xx status code
func (o *ConversationDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this conversation delete bad request response has a 5xx status code
func (o *ConversationDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this conversation delete bad request response a status code equal to that given
func (o *ConversationDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the conversation delete bad request response
func (o *ConversationDeleteBadRequest) Code() int {
	return 400
}

func (o *ConversationDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteBadRequest", 400)
}

func (o *ConversationDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteBadRequest", 400)
}

func (o *ConversationDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConversationDeleteUnauthorized creates a ConversationDeleteUnauthorized with default headers values
func NewConversationDeleteUnauthorized() *ConversationDeleteUnauthorized {
	return &ConversationDeleteUnauthorized{}
}

/*
ConversationDeleteUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type ConversationDeleteUnauthorized struct {
}

// IsSuccess returns true when this conversation delete unauthorized response has a 2xx status code
func (o *ConversationDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this conversation delete unauthorized response has a 3xx status code
func (o *ConversationDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this conversation delete unauthorized response has a 4xx status code
func (o *ConversationDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this conversation delete unauthorized response has a 5xx status code
func (o *ConversationDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this conversation delete unauthorized response a status code equal to that given
func (o *ConversationDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the conversation delete unauthorized response
func (o *ConversationDeleteUnauthorized) Code() int {
	return 401
}

func (o *ConversationDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteUnauthorized", 401)
}

func (o *ConversationDeleteUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteUnauthorized", 401)
}

func (o *ConversationDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConversationDeleteNotFound creates a ConversationDeleteNotFound with default headers values
func NewConversationDeleteNotFound() *ConversationDeleteNotFound {
	return &ConversationDeleteNotFound{}
}

/*
ConversationDeleteNotFound describes a response with status code 404, with default header values.

not found
*/
type ConversationDeleteNotFound struct {
}

// IsSuccess returns true when this conversation delete not found response has a 2xx status code
func (o *ConversationDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this conversation delete not found response has a 3xx status code
func (o *ConversationDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this conversation delete not found response has a 4xx status code
func (o *ConversationDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this conversation delete not found response has a 5xx status code
func (o *ConversationDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this conversation delete not found response a status code equal to that given
func (o *ConversationDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the conversation delete not found response
func (o *ConversationDeleteNotFound) Code() int {
	return 404
}

func (o *ConversationDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteNotFound", 404)
}

func (o *ConversationDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteNotFound", 404)
}

func (o *ConversationDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConversationDeleteNotAcceptable creates a ConversationDeleteNotAcceptable with default headers values
func NewConversationDeleteNotAcceptable() *ConversationDeleteNotAcceptable {
	return &ConversationDeleteNotAcceptable{}
}

/*
ConversationDeleteNotAcceptable describes a response with status code 406, with default header values.

not acceptable
*/
type ConversationDeleteNotAcceptable struct {
}

// IsSuccess returns true when this conversation delete not acceptable response has a 2xx status code
func (o *ConversationDeleteNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this conversation delete not acceptable response has a 3xx status code
func (o *ConversationDeleteNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this conversation delete not acceptable response has a 4xx status code
func (o *ConversationDeleteNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this conversation delete not acceptable response has a 5xx status code
func (o *ConversationDeleteNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this conversation delete not acceptable response a status code equal to that given
func (o *ConversationDeleteNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the conversation delete not acceptable response
func (o *ConversationDeleteNotAcceptable) Code() int {
	return 406
}

func (o *ConversationDeleteNotAcceptable) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteNotAcceptable", 406)
}

func (o *ConversationDeleteNotAcceptable) String() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteNotAcceptable", 406)
}

func (o *ConversationDeleteNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConversationDeleteInternalServerError creates a ConversationDeleteInternalServerError with default headers values
func NewConversationDeleteInternalServerError() *ConversationDeleteInternalServerError {
	return &ConversationDeleteInternalServerError{}
}

/*
ConversationDeleteInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type ConversationDeleteInternalServerError struct {
}

// IsSuccess returns true when this conversation delete internal server error response has a 2xx status code
func (o *ConversationDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this conversation delete internal server error response has a 3xx status code
func (o *ConversationDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this conversation delete internal server error response has a 4xx status code
func (o *ConversationDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this conversation delete internal server error response has a 5xx status code
func (o *ConversationDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this conversation delete internal server error response a status code equal to that given
func (o *ConversationDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the conversation delete internal server error response
func (o *ConversationDeleteInternalServerError) Code() int {
	return 500
}

func (o *ConversationDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteInternalServerError", 500)
}

func (o *ConversationDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v1/conversations/{id}][%d] conversationDeleteInternalServerError", 500)
}

func (o *ConversationDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
