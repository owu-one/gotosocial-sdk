// Code generated by go-swagger; DO NOT EDIT.

package federation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new federation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new federation API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new federation API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for federation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationActivityJSON sets the Accept header to "application/activity+json".
func WithAcceptApplicationActivityJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/activity+json"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	S2sFeaturedCollectionGet(params *S2sFeaturedCollectionGetParams, opts ...ClientOption) (*S2sFeaturedCollectionGetOK, error)

	S2sOutboxGet(params *S2sOutboxGetParams, opts ...ClientOption) (*S2sOutboxGetOK, error)

	S2sRepliesGet(params *S2sRepliesGetParams, opts ...ClientOption) (*S2sRepliesGetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	S2sFeaturedCollectionGet gets the featured collection pinned posts for a user

	The response will contain an ordered collection of Note URIs in the `items` property.

It is up to the caller to dereference the provided Note URIs (or not, if they already have them cached).

HTTP signature is required on the request.
*/
func (a *Client) S2sFeaturedCollectionGet(params *S2sFeaturedCollectionGetParams, opts ...ClientOption) (*S2sFeaturedCollectionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS2sFeaturedCollectionGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "s2sFeaturedCollectionGet",
		Method:             "GET",
		PathPattern:        "/users/{username}/collections/featured",
		ProducesMediaTypes: []string{"application/activity+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &S2sFeaturedCollectionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S2sFeaturedCollectionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for s2sFeaturedCollectionGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	S2sOutboxGet gets the public outbox collection for an actor

	Note that the response will be a Collection with a page as `first`, as shown below, if `page` is `false`.

If `page` is `true`, then the response will be a single `CollectionPage` without the wrapping `Collection`.

HTTP signature is required on the request.
*/
func (a *Client) S2sOutboxGet(params *S2sOutboxGetParams, opts ...ClientOption) (*S2sOutboxGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS2sOutboxGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "s2sOutboxGet",
		Method:             "GET",
		PathPattern:        "/users/{username}/outbox",
		ProducesMediaTypes: []string{"application/activity+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &S2sOutboxGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S2sOutboxGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for s2sOutboxGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	S2sRepliesGet gets the replies collection for a status

	Note that the response will be a Collection with a page as `first`, as shown below, if `page` is `false`.

If `page` is `true`, then the response will be a single `CollectionPage` without the wrapping `Collection`.

HTTP signature is required on the request.
*/
func (a *Client) S2sRepliesGet(params *S2sRepliesGetParams, opts ...ClientOption) (*S2sRepliesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewS2sRepliesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "s2sRepliesGet",
		Method:             "GET",
		PathPattern:        "/users/{username}/statuses/{status}/replies",
		ProducesMediaTypes: []string{"application/activity+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &S2sRepliesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*S2sRepliesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for s2sRepliesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
