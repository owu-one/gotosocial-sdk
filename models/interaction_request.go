// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InteractionRequest InteractionRequest represents a pending, approved, or rejected interaction of type favourite, reply, or reblog.
//
// swagger:model InteractionRequest
type InteractionRequest struct {

	// The timestamp that the interaction request was accepted (ISO 8601 Datetime). Field omitted if request not accepted (yet).
	AcceptedAt string `json:"accepted_at,omitempty"`

	// The timestamp of the interaction request (ISO 8601 Datetime)
	CreatedAt string `json:"created_at,omitempty"`

	// The id of the interaction request in the database.
	ID string `json:"id,omitempty"`

	// The timestamp that the interaction request was rejected (ISO 8601 Datetime). Field omitted if request not rejected (yet).
	RejectedAt string `json:"rejected_at,omitempty"`

	// The type of interaction that this interaction request pertains to.
	//
	// `favourite` - Someone favourited a status.
	// `reply` - Someone replied to a status.
	// `reblog` - Someone reblogged / boosted a status.
	Type string `json:"type,omitempty"`

	// URI of the Accept or Reject. Only set if accepted_at or rejected_at is set, else omitted.
	URI string `json:"uri,omitempty"`

	// account
	Account *Account `json:"account,omitempty"`

	// reply
	Reply *Status `json:"reply,omitempty"`

	// status
	Status *Status `json:"status,omitempty"`
}

// Validate validates this interaction request
func (m *InteractionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InteractionRequest) validateAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *InteractionRequest) validateReply(formats strfmt.Registry) error {
	if swag.IsZero(m.Reply) { // not required
		return nil
	}

	if m.Reply != nil {
		if err := m.Reply.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reply")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reply")
			}
			return err
		}
	}

	return nil
}

func (m *InteractionRequest) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this interaction request based on the context it is used
func (m *InteractionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReply(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InteractionRequest) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.Account != nil {

		if swag.IsZero(m.Account) { // not required
			return nil
		}

		if err := m.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *InteractionRequest) contextValidateReply(ctx context.Context, formats strfmt.Registry) error {

	if m.Reply != nil {

		if swag.IsZero(m.Reply) { // not required
			return nil
		}

		if err := m.Reply.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reply")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reply")
			}
			return err
		}
	}

	return nil
}

func (m *InteractionRequest) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InteractionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InteractionRequest) UnmarshalBinary(b []byte) error {
	var res InteractionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
