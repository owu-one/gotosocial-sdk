// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdminEmoji AdminEmoji models the admin view of a custom emoji.
//
// swagger:model AdminEmoji
type AdminEmoji struct {

	// Used for sorting custom emoji in the picker.
	// Example: blobcats
	Category string `json:"category,omitempty"`

	// The MIME content type of the emoji.
	// Example: image/png
	ContentType string `json:"content_type,omitempty"`

	// True if this emoji has been disabled by an admin action.
	// Example: false
	Disabled bool `json:"disabled,omitempty"`

	// The domain from which the emoji originated. Only defined for remote domains, otherwise key will not be set.
	// Example: example.org
	Domain string `json:"domain,omitempty"`

	// The ID of the emoji.
	// Example: 01GEM7SFDZ7GZNRXFVZ3X4E4N1
	ID string `json:"id,omitempty"`

	// The name of the custom emoji.
	// Example: blobcat_uwu
	Shortcode string `json:"shortcode,omitempty"`

	// A link to a static copy of the custom emoji.
	// Example: https://example.org/fileserver/emojis/blogcat_uwu.png
	StaticURL string `json:"static_url,omitempty"`

	// The total file size taken up by the emoji in bytes, including static and animated versions.
	// Example: 69420
	TotalFileSize int64 `json:"total_file_size,omitempty"`

	// The ActivityPub URI of the emoji.
	// Example: https://example.org/emojis/016T5Q3SQKBT337DAKVSKNXXW1
	URI string `json:"uri,omitempty"`

	// Web URL of the custom emoji.
	// Example: https://example.org/fileserver/emojis/blogcat_uwu.gif
	URL string `json:"url,omitempty"`

	// Time when the emoji image was last updated.
	// Example: 2022-10-05T09:21:26.419Z
	UpdatedAt string `json:"updated_at,omitempty"`

	// Emoji is visible in the emoji picker of the instance.
	// Example: true
	VisibleInPicker bool `json:"visible_in_picker,omitempty"`
}

// Validate validates this admin emoji
func (m *AdminEmoji) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this admin emoji based on context it is used
func (m *AdminEmoji) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdminEmoji) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdminEmoji) UnmarshalBinary(b []byte) error {
	var res AdminEmoji
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
