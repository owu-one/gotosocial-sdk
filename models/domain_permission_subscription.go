// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainPermissionSubscription DomainPermissionSubscription represents an auto-refreshing subscription to a list of domain permissions (allows, blocks).
//
// swagger:model DomainPermissionSubscription
type DomainPermissionSubscription struct {

	// If true, this domain permission subscription will "adopt" domain permissions which already exist on the instance, and which meet the following conditions: 1) they have no subscription ID (ie., they're "orphaned") and 2) they are present in the subscribed list. Such orphaned domain permissions will be given this subscription's subscription ID value.
	// Example: false
	AdoptOrphans bool `json:"adopt_orphans,omitempty"`

	// If true, domain permissions arising from this subscription will be created as drafts that must be approved by a moderator to take effect. If false, domain permissions from this subscription will come into force immediately.
	// Example: true
	AsDraft bool `json:"as_draft,omitempty"`

	// MIME content type to use when parsing the permissions list.
	// Example: text/csv
	ContentType string `json:"content_type,omitempty"`

	// Count of domain permission entries discovered at URI on last (successful) fetch.
	// Example: 53
	// Read Only: true
	Count uint64 `json:"count,omitempty"`

	// Time at which the subscription was created (ISO 8601 Datetime).
	// Example: 2021-07-30T09:20:25+00:00
	CreatedAt string `json:"created_at,omitempty"`

	// ID of the account that created this subscription.
	// Example: 01FBW21XJA09XYX51KV5JVBW0F
	// Read Only: true
	CreatedBy string `json:"created_by,omitempty"`

	// If most recent fetch attempt failed, this field will contain an error message related to the fetch attempt.
	// Example: Oopsie doopsie, we made a fucky wucky.
	// Read Only: true
	Error string `json:"error,omitempty"`

	// (Optional) password to set for basic auth when doing a fetch of URI.
	// Example: admin123
	FetchPassword string `json:"fetch_password,omitempty"`

	// (Optional) username to set for basic auth when doing a fetch of URI.
	// Example: admin123
	FetchUsername string `json:"fetch_username,omitempty"`

	// Time of the most recent fetch attempt (successful or otherwise) (ISO 8601 Datetime).
	// Example: 2021-07-30T09:20:25+00:00
	// Read Only: true
	FetchedAt string `json:"fetched_at,omitempty"`

	// The ID of the domain permission subscription.
	// Example: 01FBW21XJA09XYX51KV5JVBW0F
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The type of domain permission subscription (allow, block).
	// Example: block
	PermissionType string `json:"permission_type,omitempty"`

	// Priority of this subscription compared to others of the same permission type. 0-255 (higher = higher priority).
	// Example: 100
	Priority uint8 `json:"priority,omitempty"`

	// Time of the most recent successful fetch (ISO 8601 Datetime).
	// Example: 2021-07-30T09:20:25+00:00
	// Read Only: true
	SuccessfullyFetchedAt string `json:"successfully_fetched_at,omitempty"`

	// Title of this subscription, as set by admin who created or updated it.
	// Example: really cool list of neato pals
	Title string `json:"title,omitempty"`

	// URI to call in order to fetch the permissions list.
	// Example: https://www.example.org/blocklists/list1.csv
	URI string `json:"uri,omitempty"`
}

// Validate validates this domain permission subscription
func (m *DomainPermissionSubscription) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this domain permission subscription based on the context it is used
func (m *DomainPermissionSubscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFetchedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuccessfullyFetchedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainPermissionSubscription) contextValidateCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "count", "body", uint64(m.Count)); err != nil {
		return err
	}

	return nil
}

func (m *DomainPermissionSubscription) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_by", "body", string(m.CreatedBy)); err != nil {
		return err
	}

	return nil
}

func (m *DomainPermissionSubscription) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "error", "body", string(m.Error)); err != nil {
		return err
	}

	return nil
}

func (m *DomainPermissionSubscription) contextValidateFetchedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fetched_at", "body", string(m.FetchedAt)); err != nil {
		return err
	}

	return nil
}

func (m *DomainPermissionSubscription) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DomainPermissionSubscription) contextValidateSuccessfullyFetchedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "successfully_fetched_at", "body", string(m.SuccessfullyFetchedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainPermissionSubscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainPermissionSubscription) UnmarshalBinary(b []byte) error {
	var res DomainPermissionSubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
