// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebPushNotification WebPushNotification represents a notification summary delivered to the client by the Web Push server.
//
// It does not contain an entire Notification, just the NotificationID and some preview information.
// It is not used in the client API directly, but is included in the API doc for decoding Web Push notifications.
//
// swagger:model WebPushNotification
type WebPushNotification struct {

	// AccessToken is the access token associated with the Web Push subscription.
	// I don't know why this is sent, given that the client should know that already,
	// but Feditext does use it.
	AccessToken string `json:"access_token,omitempty"`

	// Body is a preview of the notification body,
	// such as the first line of a status's CW or text,
	// or the first line of an account bio.
	Body string `json:"body,omitempty"`

	// Icon is an image URL that can be displayed with the notification,
	// normally the account's avatar.
	Icon string `json:"icon,omitempty"`

	// NotificationID is the Notification.ID of the referenced Notification.
	NotificationID string `json:"notification_id,omitempty"`

	// NotificationType is the Notification.Type of the referenced Notification.
	NotificationType string `json:"notification_type,omitempty"`

	// PreferredLocale is a BCP 47 language tag for the receiving user's locale.
	PreferredLocale string `json:"preferred_locale,omitempty"`

	// Title is a title for the notification,
	// generally describing an action taken by a user.
	Title string `json:"title,omitempty"`
}

// Validate validates this web push notification
func (m *WebPushNotification) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this web push notification based on context it is used
func (m *WebPushNotification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WebPushNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebPushNotification) UnmarshalBinary(b []byte) error {
	var res WebPushNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
