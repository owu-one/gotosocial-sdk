// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Application Application models an api application.
//
// swagger:model Application
type Application struct {

	// Client ID associated with this application.
	ClientID string `json:"client_id,omitempty"`

	// Client secret associated with this application.
	ClientSecret string `json:"client_secret,omitempty"`

	// The ID of the application.
	// Example: 01FBVD42CQ3ZEEVMW180SBX03B
	ID string `json:"id,omitempty"`

	// The name of the application.
	// Example: Tusky
	Name string `json:"name,omitempty"`

	// Post-authorization redirect URI for the application (OAuth2).
	// Example: https://example.org/callback?some=query
	RedirectURI string `json:"redirect_uri,omitempty"`

	// Post-authorization redirect URIs for the application (OAuth2).
	// Example: [https://example.org/callback?some=query]
	RedirectURIs []string `json:"redirect_uris"`

	// OAuth scopes for this application.
	Scopes []string `json:"scopes"`

	// Push API key for this application.
	VapidKey string `json:"vapid_key,omitempty"`

	// The website associated with the application (url)
	// Example: https://tusky.app
	Website string `json:"website,omitempty"`
}

// Validate validates this application
func (m *Application) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this application based on context it is used
func (m *Application) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Application) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Application) UnmarshalBinary(b []byte) error {
	var res Application
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
