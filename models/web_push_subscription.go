// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebPushSubscription WebPushSubscription represents a subscription to a Web Push server.
//
// swagger:model WebPushSubscription
type WebPushSubscription struct {

	// Where push alerts will be sent to.
	Endpoint string `json:"endpoint,omitempty"`

	// The id of the push subscription in the database.
	ID string `json:"id,omitempty"`

	// The streaming server's VAPID public key.
	ServerKey string `json:"server_key,omitempty"`

	// Whether the subscription uses RFC or pre-RFC Web Push standards.
	// For GotoSocial, this is always true.
	Standard bool `json:"standard,omitempty"`

	// alerts
	Alerts *WebPushSubscriptionAlerts `json:"alerts,omitempty"`

	// policy
	Policy WebPushNotificationPolicy `json:"policy,omitempty"`
}

// Validate validates this web push subscription
func (m *WebPushSubscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebPushSubscription) validateAlerts(formats strfmt.Registry) error {
	if swag.IsZero(m.Alerts) { // not required
		return nil
	}

	if m.Alerts != nil {
		if err := m.Alerts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alerts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alerts")
			}
			return err
		}
	}

	return nil
}

func (m *WebPushSubscription) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if err := m.Policy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("policy")
		}
		return err
	}

	return nil
}

// ContextValidate validate this web push subscription based on the context it is used
func (m *WebPushSubscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebPushSubscription) contextValidateAlerts(ctx context.Context, formats strfmt.Registry) error {

	if m.Alerts != nil {

		if swag.IsZero(m.Alerts) { // not required
			return nil
		}

		if err := m.Alerts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alerts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alerts")
			}
			return err
		}
	}

	return nil
}

func (m *WebPushSubscription) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if err := m.Policy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("policy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebPushSubscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebPushSubscription) UnmarshalBinary(b []byte) error {
	var res WebPushSubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
